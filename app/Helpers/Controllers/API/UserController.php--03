<?php
// veldoo project
namespace App\Http\Controllers\API;
use Illuminate\Notifications\Notifiable;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\User;
use App\Place;
use App\Notification;
use App\helpers;
use App\Item;
use App\Category;
use App\UserCategory;
use App\UserMeta;
use App\Vehicle;
use App\Ride;
use App\Driverclass;
use App\ComplainType;
use App\Contact;
use App\Complaint;
use App\Page;
use App\Rating;
use App\Wallet;
use App\BankDetail;
use App\SaveLocation;
use App\DriverChooseCar;

use App\Price;
use App\Card;
use App\Setting;
use App\OtpVerification;
use App\Subject;
use App\Favourite;
use App\Cart;
use App\Booking;
use App\Promocode;
use App\AdminContact;
use Illuminate\Support\Facades\Auth;
use App\Rules\MatchOldPassword;
use App\Notifications\ResetPassword as ResetPasswordNotification;
use Validator;
use Illuminate\Support\Facades\DB;
use Edujugon\PushNotification\PushNotification;
use Helper;
use Config;
use Illuminate\Http\UploadedFile;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\Storage;
use Illuminate\Foundation\Auth\SendsPasswordResetEmails;
use Illuminate\Support\Facades\Password;
use Carbon\Carbon;
use Illuminate\Support\Facades\URL;
use Mail;
use Illuminate\Support\Facades\Hash;

class UserController extends Controller{
	
	use Notifiable;
	use SendsPasswordResetEmails;
    public function __construct(Request $request = null){
		$this->limit = Config::get('limit_api');
        
		if(!empty($request->step) && $request->step > 1){
			 $this->middleware('auth:api')->only('register_or_update');
		}
		
		$this->successCode = 200;
		$this->errorCode = 401;
		$this->warningCode = 500;
    }
	
	public function common(){
		return response()->json(['message'=>__('Successfully.'), 'data' => array()], $this->successCode);
	}
	
	public function push2(){
		// $title, $body, $sound='default', $deviceTokens = array(), $additional=array()
		$title = 'Title driver';
		$message = 'Body Description';
		
		$deviceToken = "dByzJeEaF0cPl36cbD2wW7:APA91bFb27-Saw6kWwSjvSae8ZYUGXEFH2cD0VSoZD79zL73BCMSVdUkx63KNX025eBAz1QlClHH4gEvVCAXdZZn-X1hMfyf-Qe_SDsfZ6Fgi96sjyntERuPgYZuG1EhoODFbsnKGFMK";
		$type = 1;
		$additional = ['type'=>$type,'ride_id'=>0];
		$saveData = ['title'=>$title,'description'=>$message];
		
		$deviceType = 'ios';
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
	}
	
	public function push(){
		echo "push"; die;
		/* $title = 'Title';
		$message = 'Body Description';
		
		$deviceToken = "";
		$additional = ['type'=>2];
		$saveData = ['title'=>$title,'description'=>$message];
		
		$deviceType = 'android'; */
		//Helper::send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
	}
	
	#USER REGISTER & UPDATE
	public function register_or_update(Request $request){
		
		#trans('api.step_required')
		if(empty($request->step)){
			return response()->json(['message'=>'Step required'], $this->errorCode);
		}
		
		$rules = [];
		if($request->step == 1 || $request->step == 3){
			$rules['country_code'] = 'required|integer';
			$rules['phone'] = 'required';
			if($request->step == 1){
				$rules['password'] = 'required';
				$rules['user_type'] = 'required|integer';
			}
			$rules['first_name'] = 'required';
			$rules['last_name'] = 'required';
			$rules['email'] = 'required|email';
			//$rules['city'] = 'required';
		}
		
		if($request->step == 2){
			$rules['otp'] = 'required|integer';
		}
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>'Required data missed','error'=>$validator->errors()], $this->warningCode);
        }
		
		if($request->step == 1 || $request->step == 3){
			
			$userQuery = User::where(['country_code' => $request->country_code, 'phone' => $request->phone]);
			if(!empty($request->email)){
				
				$userQuery2 = User::where(['email' => $request->email]);
				$isUserEmail = $userQuery2->first();
			}
			
			$isUser = $userQuery->first();
			
			/* print_r($isUser->toArray());
			print_r(Auth::user()->toArray());
			exit; */
			
			if(!empty($isUser)){
				if($request->step == 3){
					if($isUser->country_code.$isUser->phone != Auth::user()->country_code.Auth::user()->phone){
						return response()->json(['message'=>'Phone number already exists', 'data'=>$isUser], $this->warningCode);
					}
				}else{
					return response()->json(['message'=>'Phone number already exists', 'data'=>$isUser], $this->warningCode);
				}
			}
			if(!empty($isUserEmail)){
				if($request->step == 3){
					if($isUserEmail->email != Auth::user()->email){
						return response()->json(['message'=>'Email already exists', 'data'=>$isUserEmail], $this->warningCode);
					}
				}else{
					return response()->json(['message'=>'Email already exists', 'data'=>$isUserEmail], $this->warningCode);
				}
			}
		}
		
		if($request->step == 2){
			
			$expiryMin = config('app.otp_expiry_minutes');
			$now = Carbon::now();
			$haveOtp = OtpVerification::where(['email' => Auth::user()->email, 'otp' => $request->otp])->first();
			
			if(empty($haveOtp)){
				return response()->json(['message'=>'Verification code is incorrect, please try again'], $this->warningCode);
			}
			
			if($now->diffInMinutes($haveOtp->updated_at)>=$expiryMin){
				return response()->json(['message'=>'Verification code has expired, please use a new code by clicking resend the code'], $this->warningCode);
			}
			
			$haveOtp->delete();
			
			$userData = User::where('id', Auth::user()->id)->first();
			$userData->step = $request->step;
			
			$userData->verify = 1;
			$userData->save();
			
			return response()->json(['message' => 'Verified'], $this->successCode);
		}
		
		$input = $request->all();
		
		try{
			
			/* if(!empty($input['email'])){
				$input['user_name'] = $input['email'];
			} */
			
			if (Auth::check()) {
				
				$user_id = Auth::user()->id;
				
				if($request->hasFile('image') && $request->file('image')->isValid()){
						
					$imageName = Auth::user()->image;
					if(!empty($imageName)){
						Storage::disk('public')->delete("$imageName");
					}
					
					$input['image'] = Storage::disk('public')->putFileAs(
						'user/'.$user_id, $request->file('image'),'profile-image.'.$input['image']->extension()
					);
				}
				
				$userData = User::where('id', $user_id)->first();
				
				foreach($input as $key => $value){
					$userData->$key = $value;
				}
				if(!empty($request->device_type))
			{
				$userData->device_type = $request->device_type;
			}
			if(!empty($request->device_token))
			{
				$userData->device_token = $request->device_token;
			}
				$userData->save();
				$token = '';
			}else{
				
				$user = User::create($input);
				$user->AauthAcessToken()->delete();
				$token = $user->createToken('auth')->accessToken;
				if(!empty($request->device_type))
			{
				$user->device_type = $request->device_type;
			}
			if(!empty($request->device_token))
			{
				$user->device_token = $request->device_token;
			}
				$user->save();
				
				$user_id = $user->id;
				
				if($request->hasFile('image') && $request->file('image')->isValid()){
					
					$input['image'] = Storage::disk('public')->putFileAs(
						'user/'.$user_id, $request->file('image'),'profile-image.'.$input['image']->extension()
					);
				}
				
				#SEND OTP
				$otp = rand(1000,9999);
				$data = array('name' => $otp);
				$m = Mail::send('mail', $data, function($message) use ($request) {
					$message->to($request->email, 'OTP')->subject('OTP Verification Code');
					
					if(!empty($request->from)){
						$message->from($request->from, 'FoodFix');
					}
				});
				$expiryMin = config('app.otp_expiry_minutes');
				$endTime = Carbon::now()->addMinutes($expiryMin)->format('Y-m-d H:i:s');
				OtpVerification::updateOrCreate(
					['email'=>$request->email],
					['otp' => $otp,'expiry'=>$endTime]
				);
				
							
				$userData = $this->getUser($user_id);
			
				return response()->json(['message' => 'The verification code has been sent to your email address', 'user' => $userData, 'token' => $token, 'otp' => $otp], $this->successCode);
			}
			
			$userData = $this->getUser($user_id);
			
			return response()->json(['message'=>'Success','user' => $userData,'token'=>$token], $this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], 401);
		} catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], 401);
		}
    }
	
	#USER LOGIN
	public function login(Request $request){
		
		$rules = [
           
            //'email' => 'required',
            'password' => 'required',
        ];
		
	
		
		$where = ['password' => request('password')];
		if(!empty($request->email))
		{
		$where['email'] = $request->email;
		}
		
		$where2 = ['password' => request('password')];
		if(!empty($request->phone))
		{
		$where2['phone'] = $request->phone;
		}
        if(auth()->attempt($where)){
			
			
			
			Auth::user()->AauthAcessToken()->delete();
            $user = Auth::user();
			if($user->verify == 0){
				return response()->json(['message'=>'Your Email is not verified yet'], $this->warningCode);
			} 
			if(!empty($request->fcm_token)){
				
				$user['fcm_token'] = $request->fcm_token;
				
			}
			if(!empty($request->device_type)){
				$user['device_type'] = $request->device_type;
				
			}
			if(!empty($request->device_token)){
				$user['device_token'] = $request->device_token;
				
			}
			
				$user['updated_at'] = Carbon::now();
				$user->save();
			
			/* if($user->status == 0){
				return response()->json(['message'=>'Your account is disabled', 'user'=>'', 'token'=>''], $this->warningCode);
			}
			if($user->verify == 0){
				return response()->json(['message'=>'Your number is not verified to contiue please login via phone number', 'user'=>$user, 'token'=>''], $this->successCode);
			} */
			
            $token =  $user->createToken('auth')->accessToken;
			$user = $this->getUser($user->id);
			
			return response()->json(['message'=>'Success', 'user'=>$user, 'token'=>$token], $this->successCode);
        } 
		else if(auth()->attempt($where2)){
			
		
			Auth::user()->AauthAcessToken()->delete();
            $user = Auth::user();
			
			if(!empty($request->fcm_token)){
				
				$user['fcm_token'] = $request->fcm_token;
				
			}
			if(!empty($request->device_type)){
				$user['device_type'] = $request->device_type;
				
			}
			if(!empty($request->device_token)){
				$user['device_token'] = $request->device_token;
				
			}
			
				$user['updated_at'] = Carbon::now();
				$user->save();
			/* if($user->status == 0){
				return response()->json(['message'=>'Your account is disabled', 'user'=>'', 'token'=>''], $this->warningCode);
			}
			if($user->verify == 0){
				return response()->json(['message'=>'Please verify your number', 'user'=>$user, 'token'=>''], $this->successCode);
			} */
			
            $token =  $user->createToken('auth')->accessToken;
			$user = $this->getUser($user->id);
			
			return response()->json(['message'=>'Success', 'user'=>$user, 'token'=>$token], $this->successCode);
        }
		else{
            return response()->json(['message'=>'Details are incorrect, please try again', 'user'=>'', 'token'=>''], $this->errorCode);
        }
	}
	public function driverVerifyOtp(Request $request){
		
		$rules = [
            'country_code' => 'required',
            'phone' => 'required',
            'otp' => 'required',
        ];
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		
	$expiryMin = config('app.otp_expiry_minutes');
			$now = Carbon::now();
			$haveOtp = OtpVerification::where(['phone' =>$request->phone, 'otp' => $request->otp])->first();
			
			if(empty($haveOtp)){
				return response()->json(['message'=>'Verification code is incorrect, please try again'], $this->warningCode);
			}
			
			if($now->diffInMinutes($haveOtp->updated_at)>=$expiryMin){
				return response()->json(['message'=>'Verification code has expired, please use a new code by clicking resend the code'], $this->warningCode);
			}
			
			$haveOtp->delete();
			
			$userData = User::where('phone', $request->phone)->first();
			Auth::login($userData);
			$userData->verify = 1;
			$userData->save();
			$token =  $userData->createToken('auth')->accessToken;
			$user = $this->getUser($userData->id);
			
			return response()->json(['message'=>'Success', 'user'=>$user, 'token'=>$token], $this->successCode);
			
			//return response()->json(['message' => 'Verified'], $this->successCode);
	}
	public function verifyOtp(Request $request){
		
		$rules = [
            'country_code' => 'required',
            'phone' => 'required',
            'otp' => 'required',
        ];
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		
	$expiryMin = config('app.otp_expiry_minutes');
			$now = Carbon::now();
			$haveOtp = OtpVerification::where(['phone' =>$request->phone, 'otp' => $request->otp])->first();
			
			if(empty($haveOtp)){
				return response()->json(['message'=>'Verification code is incorrect, please try again'], $this->warningCode);
			}
			
			if($now->diffInMinutes($haveOtp->updated_at)>=$expiryMin){
				return response()->json(['message'=>'Verification code has expired, please use a new code by clicking resend the code'], $this->warningCode);
			}
			
			$haveOtp->delete();
			
			$userData = User::where('phone', $request->phone)->first();
			Auth::login($userData);
			$userData->verify = 1;
			$userData->save();
			$token =  $userData->createToken('auth')->accessToken;
			$user = $this->getUser($userData->id);
			
			return response()->json(['message'=>'Success', 'user'=>$user, 'token'=>$token], $this->successCode);
			
			//return response()->json(['message' => 'Verified'], $this->successCode);
	}
	public function social_login(Request $request){ 
	
	$rules = [];
		
			
			$rules['social_id'] = 'required';
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>'Required data missed','error'=>$validator->errors()], $this->warningCode);
        }
		
	
			      
		  $user = User::where('social_id', '=', $_REQUEST['social_id'])->first();
        if(!empty($user)){
			
			if(!empty($_REQUEST['email'])){
				
			$useremailcheck = User::where([['email', '=', $_REQUEST['email']],['social_id', '=', $_REQUEST['social_id']]])->first();
			if(!empty($useremailcheck))
			{
				
			}
			else
			{
				
				if(!empty($request->email)){
                $user->email = $request->email;
            }
			}
			}
			if(!empty($_REQUEST['phone_number'])){
			$userphonecheck = User::where([['phone_number', '=', $_REQUEST['phone_number']],['social_id', '=', $_REQUEST['social_id']]])->first();
			if(!empty($userphonecheck))
			{
				
			}
			else
			{
				if(!empty($request->phone_number)){
                $user->phone_number = $request->phone_number;
            }
			}
			}
			
		}
		else
		{
			
			if(!empty($_REQUEST['email'])){
				$user = User::where('email', '=', $_REQUEST['email'])->first();
				
			}
			if(!empty($_REQUEST['phone_number'])){
				$user = User::where('phone_number', '=', $_REQUEST['phone_number'])->first();
			
			}
			if(!empty($user))
			{
			}
			else
			{
				
				$user = new User();
				if(!empty($request->email)){
                $user->email = $request->email;
            }
			if(!empty($request->phone_number)){
                $user->phone_number = $request->phone_number;
            }
			}
			
			
		}	
		
		 try {
			 if(!empty($request->email)){
                $user->email = $request->email;
            }
			if(!empty($request->phone_number)){
                $user->phone_number = $request->phone_number;
            }
			  if(!empty($request->social_id)){
                $user->social_id = $request->social_id;
            }
			if(!empty($request->social_type)){
                $user->social_type = $request->social_type;
            }
           	if(!empty($request->first_name)){
                $user->first_name = $request->first_name;
            }
		if(!empty($request->last_name)){
                $user->last_name = $request->last_name;
            }
          if(!empty($request->device_type)){
                $user->device_type = $request->device_type;
            }
			if(!empty($request->device_token)){
                $user->device_token = $request->device_token;
            }
            	if(!empty($request->user_type))
		{
			$user->user_type = $request->user_type;
		}
		else
		{
			$user->user_type = 1;
		}
            
            if(!empty($_FILES['image'])){

                if(isset($_FILES['image']) && $_FILES['image']['name'] !== '' && !empty($_FILES['image']['name'])){
                    $file = $_FILES['image'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions

                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['image']['tmp_name'],$path.$filename)){
                        $user->image = $path.$filename;
                    }
                    }else{
                    
				
      return response()->json(['message'=>'upload Valid image'], $this->errorCode);
                     
                    }
				}
            }
		
		
			 $user->save();
           
		 $token =  $user->createToken('auth')->accessToken;
			$userdata = $this->getUser($user->id);
			
			
		
			return response()->json(['message'=>'Success', 'user'=>$userdata, 'token'=>$token], $this->successCode);
      

        }catch (\Illuminate\Database\QueryException $exception){
            $errorCode = $exception->errorInfo[1];
			
          $errorCode = $exception->getMessage();
			 return response()->json(['message'=>$errorCode], $this->errorCode);
        }catch(\Exception $exception){
		
       $errorCode = $exception->getMessage();
			return response()->json(['message'=>$errorCode], $this->errorCode);
        }
          
       
		
    }
	public function register(Request $request){
		DB::beginTransaction();
		try{
		$rules = [
           // 'signup_type' => 'required|integer|between:1,3',
            'image' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
            'device_type' => 'required',
            'device_token' => 'required',
            'first_name' => 'required',
            'last_name' => 'required',
			'country_code' => 'required|integer',
			'phone' => 'required|unique:users',
            'password' => 'required',
			'email'=>'required|email|unique:users',
			'user_type'=>'required'
		];
		 $validator = Validator::make($request->all(), $rules);
		   if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);  
          
        }
			
			$input=$request->all();
			$input['password']=Hash::make($request->password);
			$userData=\App\User::create($input);
			$userData->AauthAcessToken()->delete();
			$token =  $userData->createToken('auth')->accessToken;
			
		
	if(!empty($_FILES['image'])){
              if(isset($_FILES['image']) && $_FILES['image']['name'] !== '' && !empty($_FILES['image']['name'])){
                    $file = $_FILES['image'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = "IMG-".date('Ymd').'-'.$file;
					 $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions

                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
					 if(move_uploaded_file($_FILES['image']['tmp_name'],$path.$filename)){
                        $input['image'] = url($path.$filename);
                    }
                    }else{
						return back()->with('error', __('Upload Valid Image'));
                    }
				}
            }
			\App\User::where('id', $userData->id)->update($input);
			DB::commit();
			
		 return response()->json(['success'=>true,'message'=>'Register successfully.','user'=>$userData,'token'=>$token],$this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
				DB::rollback();
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], 401);
		} catch(\Exception $exception){
				DB::rollback();
			return response()->json(['message'=>$exception->getMessage()], 401);
		}
    }
	
	#RESEND OTP
	public function resendOtp(Request $request){
		
		$rules = [
            'country_code' => 'required',
            'phone' => 'required',
        ];
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		$isUser = User::where(['country_code' => $request->country_code, 'phone' => $request->phone])->first();
		if(empty($isUser)){
			return response()->json(['message'=>'Your number is not registered with us.'], $this->warningCode);
		}
		
		$expiryMin = config('app.otp_expiry_minutes');
		$now = Carbon::now();
		
		$haveOtp = OtpVerification::where(['phone' => $isUser->phone])->first();
		
		/* if(!empty($haveOtp)){
			if($now->diffInMinutes($haveOtp->updated_at)<$expiryMin){
				return response()->json(['message'=>'Please wait 10 minutes since the previous code sent before resending a new verification code'], $this->warningCode);
			}
		} */
		
		$otp = rand(1000,9999);
		$data = array('name' => $otp);
	/* 	$m = Mail::send('mail', $data, function($message) use ($request, $isUser) {
			$message->to($isUser->email, 'OTP')->subject('OTP Verification Code');
			
			if(!empty($request->from)){
				$message->from($request->from, 'Haylup');
			}
		}); */
		
		$endTime = Carbon::now()->addMinutes($expiryMin)->format('Y-m-d H:i:s');
		
		$otpverify = OtpVerification::where(['country_code' => $request->country_code, 'phone' => $request->phone])->first();
			
			
			if(!empty($otpverify)){
				$otpverify->otp = $otp;
				$otpverify->expiry = $endTime;
			
			}
			else
			{
				$otpverify = new OtpVerification();
				$otpverify->phone = $request->phone;
				$otpverify->country_code = $request->country_code;
				$otpverify->otp = $otp;
				$otpverify->expiry = $endTime;
			}
				$otpverify->save();
		
		$dataArr = array('otp' => $otp);
		return response()->json(['message'=>'The verification code has been sent', 'data' => $dataArr], $this->successCode);
	}
	
	#FORGET PASSWORD
	public function forgotPassword(Request $request){
		
		$rules = [
            'email' => 'required',
        ];
		
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		$isEmail = User::where(['email' => $request->email])->first();
		if(empty($isEmail)){
			return response()->json(['message'=>'Your email is not registered. Please check again or click here to register as a new user'], $this->warningCode);
		}
		
		//$request->merge( array( 'email' => $isUser->email ) );
		
		if($request->input('email')) {
            $this->sendResetLinkEmail($request);
        }
		
		/* if($request->expectsJson()){
			return $response = Password::RESET_LINK_SENT
				? response()->json(['message' => 'Reset Password Link Sent'],$this->successCode)
				: response()->json(['message' => 'Reset Link Could Not Be Sent'],$this->warningCode);
		} */
		return response()->json(['message'=>'Reset Password Link Sent'], $this->successCode);
    }
	
	#USER DETAILS
    public function details(){
        $user = $this->getUser(Auth::user()->id);

		
        return response()->json(['message'=>__('Successfully.'),'user'=>$user], $this->successCode);
    }
	
	
	public function getUser($id){
        $where = array('id' => $id);
		
        $userdata = User::where($where)->first();
		 $cardata = DriverChooseCar::query()->where([['user_id', '=', $id]])->orderBy('id','desc')->first();
		$userdata['cardata'] = $cardata;
       /*  $ncount = Notification::query()->where([['user_id', '=', $id],['status', '=', 0]])->count();
		$userdata['notification_count'] = $ncount; */
		return $userdata; 
	}
	 
	public function getAdmin(){
        $where = array('user_type' => 1);
        $user = User::where($where)->first();
		
		return $user;
	}
	
    public function change_password(Request $request){
        $request->validate([
            'current_password' => ['required', new MatchOldPassword],
            'new_password' => ['required'],
            'new_confirm_password' => ['same:new_password'],
        ]);
		User::find(auth()->user()->id)->update(['password'=> $request->new_password]);
		return response()->json(['message'=>__('Password changed.')], $this->successCode);
	}
	 public function reset_password(Request $request){
        $request->validate([
           // 'current_password' => ['required', new MatchOldPassword],
            'new_password' => ['required'],
            'new_confirm_password' => ['same:new_password'],
        ]);
		User::find(auth()->user()->id)->update(['password'=> $request->new_password]);
		return response()->json(['message'=>__('Password changed.')], $this->successCode);
	}
	public function update_profile(Request $request){
		 $user = Auth::user();
	
                   
       
	
        

        try {
            if(!empty($request->email)){
                $user->email = $request->email;
            }
			
           if(isset($_REQUEST['availability']))
			{
				$user->availability = $_REQUEST['availability'];
			}
			if(isset($_REQUEST['notification']))
			{
				$user->notification = $_REQUEST['notification'];
			}
			
            if(!empty($request->lat)){
                $user->lat = $request->lat;
            }

            if(!empty($request->lng)){
                $user->lng = $request->lng;
            }
			
			if(!empty($request->location)){
                $user->location = $request->location;
            }
			
			 if(!empty($request->device_type)){
                $user->device_type = $request->device_type;
            }
			 if(!empty($request->device_token)){
                $user->device_token = $request->device_token;
            }
			if(!empty($request->fcm_token)){
				
				$user->fcm_token = $request->fcm_token;
				
			}
			if(!empty($request->country_code)){
                $user->country_code = $request->country_code;
            }
			if(!empty($request->phone)){
                $user->phone = $request->phone;
            }
			if(!empty($request->first_name)){
				$user->first_name = $request->first_name;
			}
			if(!empty($request->last_name)){
				$user->last_name = $request->last_name;
			}
			
				
				if(!empty($_FILES['image'])){

                if(isset($_FILES['image']) && $_FILES['image']['name'] !== '' && !empty($_FILES['image']['name'])){
                    $file = $_FILES['image'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['image']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $user->image = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
            
			//print_r($user); die;
            $user->save();
			$userdata = $this->getUser($user->id);
			
        	return response()->json(['message'=>'Success','user' => $userdata], $this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], 401);
		} catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], 401);
		}
        
        
		 
    }
	public function updateCar(Request $request){
		 $user = Auth::user();
	$user_id = $user['id'];
                   	$rules = [
            'car_id' => 'required',
            'mileage' => 'required',
        ];
		
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
       
	
        

        try {
           $driverhoosecar = new DriverChooseCar();
                $driverhoosecar->car_id = $request->car_id;
                $driverhoosecar->user_id = $user_id;
            unset($driverhoosecar->created_at);		
            unset($driverhoosecar->updated_at);
                $driverhoosecar->mileage = $request->mileage;
           
			
           
            $driverhoosecar->save();
			
			
        	return response()->json(['message'=>'Success'], $this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], 401);
		} catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], 401);
		}
        
        
		 
    }
	public function phoneVerify(Request $request){
		 $user = Auth::user(); 
		 	$rules = [
            'phone' => 'required',
            'country_code' => 'required',
        ];
		
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		$isphone = User::where(['phone' => $request->phone])->first();
		/* if(empty($isphone)){
			return response()->json(['message'=>'Your phone is not registered.'], $this->warningCode);
			
		} */
			if(!empty($isphone) && $isphone['verify'] == 1){
				return response()->json(['message'=>'Your phone number already verified.'], $this->warningCode);
			}
        try {
           
			if(!empty($request->country_code)){
                $user->country_code = $request->country_code;
            }
			if(!empty($request->phone)){
                $user->phone = $request->phone;
            }
			#SEND OTP
				$otp = rand(1000,9999);
				
				$expiryMin = config('app.otp_expiry_minutes');
				$endTime = Carbon::now()->addMinutes($expiryMin)->format('Y-m-d H:i:s');
				/* OtpVerification::updateOrCreate(
					['phone'=>$request->phone],
					['otp' => $otp,'expiry'=>$endTime]
				); */
				$otpverify = OtpVerification::where(['country_code' => $request->country_code, 'phone' => $request->phone])->first();
			
			
			if(!empty($otpverify)){
				$otpverify->otp = $otp;
				$otpverify->expiry = $endTime;
			
			}
			else
			{
				$otpverify = new OtpVerification();
				$otpverify->phone = $request->phone;
				$otpverify->country_code = $request->country_code;
				$otpverify->otp = $otp;
				$otpverify->expiry = $endTime;
			}
				$otpverify->save();
			//print_r($user); die;
            $user->save();
			$userdata = $this->getUser($user->id);
			
        	return response()->json(['message'=>'Success','user' => $userdata,'otp'=>$otp], $this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], 401);
		} catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], 401);
		}
        
        
		 
    }
	#CONTACT TO ADMIN
    public function adminContact(Request $request){
		
		$rules = [
			'subject_id' => 'required|integer|exists:subjects,id',
            'description' => 'required',
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first()], $this->warningCode);            
        }
		
		try {
			
			$subjectData = Subject::where('id', $request->subject_id)->first();
			
			$contData['user_id'] = Auth::user()->id;
			$contData['subject_id'] = $subjectData->id;
			$contData['subject_name'] = $subjectData->name;
			$contData['description'] = $request->description;
			
			$dataSaved = AdminContact::create($contData);
			
			return response()->json(['message'=>'Added successfully'], $this->successCode);
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function logout(){
		Auth::user()->AauthAcessToken()->delete();
		return response()->json(['message'=>__('Logged out successfully')], $this->successCode);
    }
	
	
	
	
    public function get_users(Request $request)
    {
        $where = array('status' => 1,'user_type'=>2,'verify'=>1);
		// Search Parameter
		isset($request->q)? $q = $request->q: $q = null;
		// Sort Parameter
		$sort = [];
		if ( isset($request->sortby) && (isset($request->direction)) ) {
			$sort[$request->sortby] = $request-> direction;
		}
        $users = User::where($where)->ofSearch($q)->ofSort($sort)->paginate($this->limit);
		return response()->json(['message'=>__('Successful.'),'users'=>$users], $this->successCode);
	}
    public function get_notification(Request $request)
    {
		$userId = Auth::user()->id;
		$user = User::where(['id'=>$userId])->first();
        $where = array('user_id' => $userId);
        $query = \App\Notification::select('notifications.*' , DB::raw("0 AS category_ids"))->where($where)->whereIn('type',[2,3,4,5,6,7,8]);
		
		$notification = $query->paginate($this->limit);
		return response()->json(['message'=>__('Successful.'),'notification'=>$notification], $this->successCode);
	}
    public function categories(Request $request)
    {
        $where = array('status' => 1);
		// Search Parameter
		isset($request->q)? $q = $request->q: $q = null;
		// Sort Parameter
		$sort = [];
		if ( isset($request->sortby) && (isset($request->direction)) ) {
			$sort[$request->sortby] = $request-> direction;
		}
		$user_id = 0;
		if (!empty(auth('api')->user()))
		{
			 $user_id = auth('api')->user()->id;
		}
		 // dd(Auth::user(), Auth::Guest());
		// dd(Auth::user()->id);
		
        $categories = Category::select("categories.*")
		->where($where)
		->ofSearch($q)
		->ofSort($sort)
		->paginate($this->limit);
		return response()->json(['message'=>__('Successful.'),'categories'=>$categories], $this->successCode);
	}
    
    public function sendOtp(Request $request)
	{
		$rules = [
            'country_code' => 'required|integer',
            'phone' => 'required|integer',
        ];
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>__('All fields are required.'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
			// OtpVerification
			$expiryMin = config('app.otp_expiry_minutes');
			$endTime = Carbon::now()->addMinutes($expiryMin)->format('Y-m-d H:i:s'); 
			$otp = rand(1000,9999);
			OtpVerification::updateOrCreate(
				['country_code'=>$request->country_code,'phone'=>$request->phone],
				['otp' => $otp,'expiry'=>$endTime]
			);
			return response()->json(['message'=>__('Send Successfully.'),'otp'=>$otp], $this->successCode);
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
    public function otpVerify(Request $request)
	{
		$rules = [
            'country_code' => 'required|integer',
            'phone' => 'required|integer',
            'otp' => 'required|integer',
        ];
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>__('All fields are required.'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
			$expiryMin = config('app.otp_expiry_minutes');
			// OtpVerification
			$now = Carbon::now(); 
			$haveOtp = OtpVerification::where(['country_code'=>$request->country_code,'phone'=>$request->phone,'otp'=>$request->otp])->first();
			if(empty($haveOtp)){
				return response()->json(['message'=>'Invalid OTP'], $this->warningCode);
			}
			if($now->diffInMinutes($haveOtp->expiry)>$expiryMin){
				return response()->json(['message'=>'OTP is expired'], $this->warningCode);
			}
			$haveOtp->delete();
			$userData = User::where('phone', $request->phone)->first();
			if(!empty($userData))
			{
			Auth::login($userData);
			
			$token =  $userData->createToken('auth')->accessToken;
			
		
		
			return response()->json(['message'=>'Verified Successfully', 'token'=>$token], $this->successCode);
			}
			else
			{
			
			return response()->json(['message'=>'Verified Successfully.', 'token'=>''], $this->successCode);
			}
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		} catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
    public function adClick(Request $request)
    {
		$rules = [
            'id' => 'required|integer',
        ];
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('admin.All fields are required.'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
			$now = Carbon::now(); 
			$haveAd = \App\Ad::where(['id'=>$request->id,'status'=>1])->first();
			if(empty($haveAd)){
				return response()->json(['message'=>trans('admin.Invalid Ad')], $this->warningCode);
			}
			if($haveAd->total_click>=$haveAd->click_limit){
				return response()->json(['message'=>trans('admin.Ad limit exceeded.')], $this->warningCode);
			}
			$haveAd->total_click =  ($haveAd->total_click+1);
			$haveAd->save();
			return response()->json(['message'=>trans('admin.Successful.')], $this->successCode);
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		} catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
    public function guestTest(Request $request)
    {
		
		$dataM = array('name'=>"Virat Gandhi");
		$data = array('name'=>1296);
		$m = Mail::send('mail', $data, function($message) use ($request) {
			 $message->to($request->to, 'OTP Verification')->subject('OTP Verification Code');
			 if(!empty($request->from)){
				$message->from($request->from,'Prospects');
			 }
		});
		dd($m);
		
        $user = $this->getUser(104);
		$usedTags = \App\Topic::where('user_id',104)->with('tags:name')->get()->pluck('tags')->flatten()->pluck('name')->unique();
		// dd($usedTags->toArray());
        return response()->json(['message'=>__('Successfully.'),'user'=>$user,'usedTags'=>$usedTags], $this->successCode);
    }
	public function driver_list(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $q = User::query();
        
        
		
		 if(!empty($_REQUEST['lat']) && !empty($_REQUEST['lng']))
		 {
		
			  $lat = $_REQUEST['lat'];
            $lon = $_REQUEST['lng'];
			
			$query = User::select("users.*"
                    ,DB::raw("3959 * acos(cos(radians(" . $lat . ")) 
                    * cos(radians(users.lat)) 
                    * cos(radians(users.lng) - radians(" . $lon . ")) 
                    + sin(radians(" .$lat. ")) 
                    * sin(radians(users.lat))) AS distance"));
					$query->where('user_type', '=',3)->having('distance', '<', 2000)->orderBy('distance','asc');
					 /* $query->where('user_type','=',3);
                    $query->where('distance','<=',20);
                    $query->orderBy('distance','asc'); */
                    
					
                    
		
       $resnewarray = $query->get()->toArray();
	 
			if(!empty($resnewarray))
			{
				//$newresultarray[$i]['user_data'] = $this->get_user($result['user_id']);
          //  $this->api_response(200,'Homedata listed successfully',$resnewarray);
		 /*  $resnewarray = array();
		  foreac */
		  
			$i = 0;
			$newresultarray = array();
			foreach($resnewarray as $result)
			{
				
				$newresultarray[$i] = $result;
				/* $dealimgresults = DealImage::query()->where('deal_images.deal_id',$result['id'])->orderBy('deal_images.id','DESC')->get()->toArray();
				$newresultarray[$i]['deal_images'] = $dealimgresults;
				$views= Click::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['views'] = "$views";
				$purchases= Order::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['purchases'] = "$purchases";
				$avgrating = DB::table('reviews')->where('business_user_id', $result['user_id'])->avg('rating');
				$avgrating = round($avgrating,2);
				$newresultarray[$i]['business_avg_rating'] = "$avgrating"; */
				$i++;
			}
			
		 return response()->json(['message'=>__('Successfully.'),'drivers'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found'], $this->successCode);
			}
			
        
		 }
		 else
		 {
			return response()->json(['message'=>'Please fill all required fields'], $this->warningCode);
		 }
    }
	#ADD MENU ITEM
    public function addFav(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'item_id' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
			
			
			
			
			$fav = Favourite::query()->where([['user_id', '=', $user_id],['item_id', '=', $request->item_id]])->first();
			if(!empty($fav))
			{
				
			}
			else
			{
				$fav = new Favourite();
			}
			$fav->item_id = $request->item_id;
            $fav->status = $request->status;
            
           
           
            $fav->user_id = $user_id;
            unset($fav->created_at);		
            unset($fav->updated_at);		
            
			
			
            if($fav->save())
			{
			
		
			}
			if($request->status == 1)
			{
				return response()->json(['message'=>'Favourite Added successfully'], $this->successCode);
			}
			else
			{
				return response()->json(['message'=>'Favourite Removed successfully'], $this->successCode);
			}
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function fav_list(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Favourite::query()->where([['user_id', '=', $user_id],['status', '=', 1]])->get()->toArray();
        
        
		
		
	 
			if(!empty($resnewarray))
			{
				//$newresultarray[$i]['user_data'] = $this->get_user($result['user_id']);
          //  $this->api_response(200,'Homedata listed successfully',$resnewarray);
		 /*  $resnewarray = array();
		  foreac */
		  
			$i = 0;
			$newresultarray = array();
			foreach($resnewarray as $result)
			{
				$item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $item['user_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['fav'] = '1';
				$newresultarray[$i]['driver_data'] = $driver_data;
				/* $dealimgresults = DealImage::query()->where('deal_images.deal_id',$result['id'])->orderBy('deal_images.id','DESC')->get()->toArray();
				$newresultarray[$i]['deal_images'] = $dealimgresults;
				$views= Click::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['views'] = "$views";
				$purchases= Order::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['purchases'] = "$purchases";
				$avgrating = DB::table('reviews')->where('business_user_id', $result['user_id'])->avg('rating');
				$avgrating = round($avgrating,2);
				$newresultarray[$i]['business_avg_rating'] = "$avgrating"; */
				$i++;
			}
			
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found'], $this->successCode);
			}
			
        
    }
	 public function addPlace(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'label' => 'required',
			'lat' => 'required',
			'lng' => 'required',
			'address' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$place = new Place();
			
			$place->label = $request->label;
            $place->address = $request->address;
            $place->lat = $request->lat;
            $place->lng = $request->lng;
            
           
           
            $place->user_id = $user_id;
          unset($place->created_at);		
            unset($place->updated_at);
			//print_r($place); die;
            $place->save();
			
		
				return response()->json(['message'=>'Address Added successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	 public function addwallet(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'price' => 'required',
			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$wallet = new Wallet();
			
			$wallet->price = $request->price;
			$wallet->type = 1;
           if(!empty($request->payment_id))
		   {
			   $wallet->payment_id = $request->payment_id;
		   }
            
           
           
            $wallet->user_id = $user_id;
          unset($wallet->created_at);		
            unset($wallet->updated_at);
			//print_r($place); die;
            $wallet->save();
			 $where = array('id' => $user_id);
		
        $userdata = User::where($where)->first();
		 $wallet_amount = $userdata['wallet_amount'];
		 if(!empty($wallet_amount))
		 {
			 $newwallet_amount = $wallet_amount+$request->price;
		 
		 }
		 else
		 {
			 $newwallet_amount = $request->price; 
		 }
		$userdata->wallet_amount = $newwallet_amount;
		$userdata->save();
				return response()->json(['message'=>'Amount Added successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function deleteCard(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		
		$rules = [
			'card_id' => 'required'
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		
		try {
			//DB::table('places')->where('id', $request->place_id)->delete();
			DB::table('cards')->where([['id', '=', $request->card_id],['user_id', '=', $user_id]])->delete();
			$msg = "Card Deleted Successfully";
				return response()->json(['message'=>$msg], $this->successCode);
			
		
		 
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function deletePlace(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		
		$rules = [
			'place_id' => 'required'
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		
		try {
			//DB::table('places')->where('id', $request->place_id)->delete();
			DB::table('places')->where([['id', '=', $request->place_id],['user_id', '=', $user_id]])->delete();
			$msg = "Place Deleted Successfully";
				return response()->json(['message'=>$msg], $this->successCode);
			
		
		 
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function addPersonal(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'firstname' => 'required',
			'id_number' => 'required',
			'issue_date' => 'required',
			'expiry_date' => 'required',
			'license_number' => 'required',
			'driver_class' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$personal = new UserMeta();
			
			$personal->firstname = $request->firstname;
            $personal->id_number = $request->id_number;
            $personal->issue_date = $request->issue_date;
            $personal->expiry_date = $request->expiry_date;
            $personal->license_number = $request->license_number;
            $personal->driver_class = $request->driver_class;
            
           
           
            $personal->user_id = $user_id;
          unset($personal->created_at);		
            unset($personal->updated_at);
			//print_r($place); die;
            $personal->save();
			
			$user->step = 1;
			
				$user->save();
		
				return response()->json(['message'=>'Personal Info Added successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function giveRating(Request $request){
		$userId = Auth::user()->id;
		$rules = [
			'rating' => 'required',
			'to_id' => 'required',
			'ride_id' => 'required',
		  ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }try {
			$rating = new Rating();
			$rating->to_id = $request->to_id;
            $rating->rating = $request->rating;
            $rating->ride_id = $request->ride_id;
            $rating->from_id = $userId;
          if(!empty($request->comment))
			{
				$rating->comment = $request->comment;
			}
           
            unset($rating->created_at);		
            unset($rating->updated_at);
			//print_r($place); die;
            $rating->save();
			$rating->save();
			return response()->json(['message'=>'Rating Added successfully'], $this->successCode);
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function bookRide(Request $request){
		try{
		$userId= Auth::user()->id;
			
		$rules = [
			//'pick_lat' => 'required',
			//'pick_lng' => 'required',
			//'dest_lat' => 'required',
			//'dest_lng' => 'required',
			'pickup_location' => 'required',
			//'dest_address' => 'required',			
			'car_type' => 'required',
			'ride_time' => 'required',
			//'ride_type'=>'required',
			 ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
        	$input=$request->all();
        	$input['user_id']=$userId;
        	$input['pickup_address']=$request->pickup_location;
        	$input['drop_off_location']=$request->drop_off_location;
        	$input['passanger']=$request->number_of_passanger;
        	$input['additional_notes']=$request->note;
        	$input['alert_time']=$request->alert_time;
			if(!empty($request->pick_lat))
			{
            $input['pick_lat'] = $request->pick_lat;
			}
			if(!empty($request->pick_lng))
			{
            $input['pick_lng'] = $request->pick_lng;
			}
			if(!empty($request->dest_lat))
			{
            $input['dest_lat'] = $request->dest_lat;
			}
			if(!empty($request->dest_lng))
			{
            $input['dest_lng'] = $request->dest_lng;
			}
			
       	 	\App\Ride::create($input);
		
		return response()->json(['message'=>'Ride Booked successfully'], $this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
 
	public function shareRide(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'pick_lat' => 'required',
			'pick_lng' => 'required',
			//'dest_lat' => 'required',
			//'dest_lng' => 'required',
			'pickup_address' => 'required',
			//'dest_address' => 'required',			
			'car_type' => 'required',
			'payment_type' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$ride = new Ride();
			
			$ride->pick_lat = $request->pick_lat;
            $ride->pick_lng = $request->pick_lng;
			if(!empty($request->drop_location))
		{
		$ride->drop_location=$request->drop_location;
		}
			if(!empty($request->dest_lat))
			{
            $ride->dest_lat = $request->dest_lat;
			}
			if(!empty($request->dest_lng))
			{
            $ride->dest_lng = $request->dest_lng;
			}
            $ride->pickup_address = $request->pickup_address;
			if(!empty($request->dest_address))
			{
            $ride->dest_address = $request->dest_address;
			}
			if(!empty($request->passanger))
			{
			$ride->passanger =$request->passanger;
			}
			if(!empty($request->schedule_time))
			{
			$ride->schedule_time =$request->schedule_time;
			}
            $ride->price = $request->price;
            $ride->car_type = $request->car_type;
            $ride->payment_type = $request->payment_type;
            $ride->pool_ride = 1;
            $pool_number = time();
            $ride->pool_number = $pool_number;
           
           
            $ride->user_id = $user_id;
          unset($ride->created_at);		
            unset($ride->updated_at);
			//print_r($place); die;
          
			
			 $lat = $_REQUEST['pick_lat'];
            $lon = $_REQUEST['pick_lng'];
			
			$query = User::select("users.*"
                    ,DB::raw("3959 * acos(cos(radians(" . $lat . ")) 
                    * cos(radians(users.current_lat)) 
                    * cos(radians(users.current_lng) - radians(" . $lon . ")) 
                    + sin(radians(" .$lat. ")) 
                    * sin(radians(users.current_lat))) AS distance"));
					$query->where('user_type', '=',2)->having('distance', '<', 20)->orderBy('distance','asc');
					$drivers = $query->get()->toArray();
	 $driverids = array();
			if(!empty($drivers))
			{
				foreach($drivers as $driver)
				{
			
			$checkride = Ride::query()->where([['driver_id', '=', $driver['id']],['status', '=', 0],['car_type', '=', 4]])->first();
			//print_r($checkride);
			if(!empty($checkride))
			{
				$driverids[] = $driver['id'];
				$ride->pool_number = $checkride['pool_number'];
			}
			else
			{
			//echo $driver['id']; die;
					$driverids[] = $driver['id'];
				$title = 'New Booking';
		$message = 'You Received new booking';
			
		$type = 1; 
		$deviceToken = $driver['device_token'];
		$additional = ['type'=>$type,'ride_id'=>0];
		//$additional = ['type'=>1];
	//echo $deviceToken; die;
		
		$deviceType = $driver['device_type'];
			if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $driver['id'];
		$notification->save();
			}
			if($deviceType == 'ios') {
				$deviceToken = $driver['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $driver['id'];
		$notification->save();
			}
				}
				
				}
				$driverids = implode(",",$driverids);
			}
			else
			{
				return response()->json(['message'=>"No Driver Found"], $this->successCode);
			}
			if(empty($driverids))
			{
				return response()->json(['message'=>"No Driver Found"], $this->successCode); 
			}
			$ride->driver_id = $driverids;
			$lat1 = $request->pick_lat;
            $long1 = $request->pick_lng;
            $lat2 = $request->dest_lat;
            $long2 = $request->dest_lng;
			$distance = $this->getdistancebyDirection($lat1,$long1,$lat2,$long2);
			if(!empty($distance))
			{
				$ride->distance = round($distance['distance'],2);
				$ride->duration = $distance['duration'];
			}
			else
			{
				return response()->json(['message'=>"No Driver Found"], $this->successCode);
			}
			//echo $distance; die;
		  $ride->save();
		  $rideid = $ride->id;
		  $ride= Ride::query()->where([['id', '=', $rideid]])->first();
				return response()->json(['message'=>'Booking Created successfully','data'=>$ride], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function scheduleRide(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'pick_lat' => 'required',
			'pick_lng' => 'required',
			'dest_lat' => 'required',
			'dest_lng' => 'required',
			'pickup_address' => 'required',
			'dest_address' => 'required',			
			'car_type' => 'required',
			'payment_type' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$ride = new Ride();
			
			$ride->pick_lat = $request->pick_lat;
            $ride->pick_lng = $request->pick_lng;
            $ride->dest_lat = $request->dest_lat;
            $ride->dest_lng = $request->dest_lng;
            $ride->pickup_address = $request->pickup_address;
            $ride->dest_address = $request->dest_address;
            $ride->price = $request->price;
            $ride->car_type = $request->car_type;
            $ride->payment_type = $request->payment_type;
            $ride->schedule_ride = $request->schedule_ride;
            $ride->schedule_time = $request->schedule_time;
            $ride->ride_time = $request->schedule_ride;
			
           
           
            $ride->user_id = $user_id;
          unset($ride->created_at);		
            unset($ride->updated_at);
			//print_r($place); die;
          
			
			 $lat = $_REQUEST['pick_lat'];
            $lon = $_REQUEST['pick_lng'];
			
			/* $query = User::select("users.*"
                    ,DB::raw("3959 * acos(cos(radians(" . $lat . ")) 
                    * cos(radians(users.current_lat)) 
                    * cos(radians(users.current_lng) - radians(" . $lon . ")) 
                    + sin(radians(" .$lat. ")) 
                    * sin(radians(users.current_lat))) AS distance"));
					$query->where('user_type', '=',2)->having('distance', '<', 20)->orderBy('distance','asc');
					$drivers = $query->get()->toArray();
	 $driverids = array();
			if(!empty($drivers))
			{
				foreach($drivers as $driver)
				{
					$driverids[] = $driver['id'];
				$title = 'New Booking';
		$message = 'You Received new booking';
			
		
		$deviceToken = $driver['device_token'];
		$additional = ['type'=>1,'ride_id'=>0];
		//$additional = ['type'=>1];
	//echo $deviceToken; die;
		
		$deviceType = $driver['device_type'];
			if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
			}
				}
				$driverids = implode(",",$driverids);
			}
			else
			{
				return response()->json(['message'=>"No Driver Found"], $this->successCode);
			}
			$ride->driver_id = $driverids; */
			$lat1 = $request->pick_lat;
            $long1 = $request->pick_lng;
            $lat2 = $request->dest_lat;
            $long2 = $request->dest_lng;
			$distance = $this->getdistancebyDirection($lat1,$long1,$lat2,$long2);
			if(!empty($distance))
			{
				$ride->distance = round($distance['distance'],2);
				$ride->duration = $distance['duration'];
			}
			else
			{
				return response()->json(['message'=>"No Driver Found"], $this->successCode);
			}
			//echo $distance; die;
		  $ride->save();
			$rideid = $ride->id;
		  $ride= Ride::query()->where([['id', '=', $rideid]])->first();
				return response()->json(['message'=>'Booking Created successfully','data'=>$ride], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function getdistancebyDirection($lat1,$long1,$lat2,$long2){
	
/* echo "lat1 ".$lat1;
echo "long1 ".$long1;
echo "lat2 ".$lat2;
echo "long2 ".$long2; 
die; */
     // $lat1 = $_REQUEST['lat1'];
     // $long1 = $_REQUEST['lon1'];
     // $lat2 =  $_REQUEST['lat2'];
     // $long2 = $_REQUEST['lon2'];  
	// AIzaSyBSKGC2md-gYLtjwtN0LUWUKzvulhgZhf8
	// new key = AIzaSyB3BkG8m_df4tC9LoWfKcSGFBxuW6GJ0Jo
$url = "https://maps.googleapis.com/maps/api/directions/json?origin=".$lat1.",".$long1."&destination=".$lat2.",".$long2."&alternatives=true&sensor=false&key=AIzaSyBziz-4En_1Mj_aM73wJvsd4kG3bR3wr3A";
/* $url = str_replace(" ","",$url);
echo $url; die; */
 $ch = curl_init();
     curl_setopt($ch, CURLOPT_URL, $url);
     curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
     curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
     curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
     curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
     $response = curl_exec($ch);

     curl_close($ch);
//$json = file_get_contents($url);

/* print_r($data['results'][0]['geometry']['location']['lat']);
print_r($data['results'][0]['geometry']['location']['lng']); */
    /*  $routes=json_decode(file_get_contents("https://maps.googleapis.com/maps/api/directions/json?origin=$origin&destination=$destination&alternatives=true&sensor=false&key=AIzaSyBSKGC2md-gYLtjwtN0LUWUKzvulhgZhf8"))->routes; */
	//print_r($response); die;
if(!empty($response))
{
	
	$data = json_decode($response, TRUE);
	if(!empty($data['routes']))
	{
	$routes = $data['routes'];
	
	$legarray = array();
	$kk = 0;
	foreach($routes as $route)
	{
		$legarray[$kk] = $route['legs'];
		$kk++;
	}
	$distancearr = array();
	$durationarray = array();
	$jj = 0;
	foreach($legarray as $legar)
	{
		$distancearr[$jj] = $legar[0]['distance']['value'];
		$durationarray[$jj] = $legar[0]['duration']['value'];
		$jj++;
	}
	


 //print the shortest distance
$distance = min($distancearr);
$duration = min($durationarray);
$distance = $distance*0.621371;
$distance = $distance/1000;



if(!empty($distance))
{
	$distanceduration['distance'] = $distance;
	$distanceduration['duration'] = $duration;
	return $distanceduration;
}
else
{
	return 0;
}
 }
   else
   {
	  return 0;
   }
   }
   else
   {
	  return 0;
   }
} 
	public function newRides(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		
		$rules = [
			'type' => 'required',
			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
			if($request->type == 1)
			{
				
 $resnewarray= Ride::query()->where([['status', '=', 0]])->whereRaw('FIND_IN_SET(?,driver_id)', [$user_id])->orderBy('id', 'desc')->get()->toArray();
			}
        if($request->type == 2)
			{
				
 $resnewarray= Ride::query()->where([['status', '=', 3]])->Where('driver_id', [$user_id])->orderBy('id', 'desc')->get()->toArray();
			}
		 if($request->type == 3)
			{
				
 $resnewarray= Ride::query()->where([['status', '<', -1]])->Where('driver_id', [$user_id])->orderBy('id', 'desc')->get()->toArray();
			}
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				$rating_data = Rating::query()->where([['ride_id', '=', $result['id']]])->get()->toArray();
				if(!empty($rating_data))
				{
				$newresultarray[$i]['rate_status'] = "1";
				}
				else
				{
					$newresultarray[$i]['rate_status'] = "0";
				}
				//$currenttime = date('h:i A');
				//echo date_default_timezone_get(); die;
				
				
				$i++;
			}
			}
 /*  $amount = array();
  $amount['go'] = round((3*$amountsetgo),2);
  $amount['premier'] = round((4*$amountsetpremier),2);
  $amount['xl'] = round((5*$amountsetxl),2);
  $amount['pool'] = round((2*$amountsetpool),2); */
  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function earning_detail(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		
		try {
				
 $resnewarray= Ride::query()->where([['status', '=', 3]])->whereRaw('driver_id', [$user_id])->orderBy('id', 'desc')->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				
				//$currenttime = date('h:i A');
				//echo date_default_timezone_get(); die;
				
				
				$i++;
			}
			}
 /*  $amount = array();
  $amount['go'] = round((3*$amountsetgo),2);
  $amount['premier'] = round((4*$amountsetpremier),2);
  $amount['xl'] = round((5*$amountsetxl),2);
  $amount['pool'] = round((2*$amountsetpool),2); */
  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function drivercompleted_ride(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		
		try {
				
 $resnewarray= Ride::query()->where([['status', '=', 3]])->whereRaw('driver_id', [$user_id])->orderBy('id', 'desc')->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				
				//$currenttime = date('h:i A');
				//echo date_default_timezone_get(); die;
				
				
				$i++;
			}
			}

  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function drivercancelled_ride(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		
		try {
				
 $resnewarray= Ride::query()->where([['status', '<', -1]])->whereRaw('driver_id', [$user_id])->orderBy('id', 'desc')->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				
				//$currenttime = date('h:i A');
				//echo date_default_timezone_get(); die;
				
				
				$i++;
			}
			}

  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function userRideList(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	$rules = [
			'type' => 'required',
					
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
				if($request->type == 1)
				{
 $resnewarray= Ride::query()->where([['user_id', '=', $user_id],['status', '=', 3]])->orderBy('id', 'desc')->get()->toArray();
				}
        if($request->type == 2)
				{
 $resnewarray= Ride::query()->where([['user_id', '=', $user_id],['status', '=', -1]])->orWhere('status',-2)->orWhere('status',-3)->orderBy('id', 'desc')->get()->toArray();
				}
				if($request->type == 3)
				{
 $resnewarray= Ride::query()->where([['user_id', '=', $user_id],['schedule_ride', '=', 1]])->orderBy('id', 'desc')->get()->toArray();
				}
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				$rating_data = Rating::query()->where([['ride_id', '=', $result['id']],['from_id', '=', $user_id]])->get()->toArray();
				if(!empty($rating_data))
				{
				$newresultarray[$i]['rating_data'] = $rating_data;
				}
				else
				{
					$newresultarray[$i]['rating_data'] = array();
				}
				if(!empty($result['driver_id']))
				{
				//$driverData= User::query()->where([['id', '=', $result['driver_id']]])->first();
				$vehicle_detail= Vehicle::query()->where([['user_id', '=', $result['driver_id']]])->first();
			$newresultarray[$i]['vehicle_info'] = $vehicle_detail;
				}
				else
				{
					$newresultarray[$i]['vehicle_info'] = array();
				}
				//$currenttime = date('h:i A');
				//echo date_default_timezone_get(); die;
				
				
				$i++;
			}
			}
 /*  $amount = array();
  $amount['go'] = round((3*$amountsetgo),2);
  $amount['premier'] = round((4*$amountsetpremier),2);
  $amount['xl'] = round((5*$amountsetxl),2);
  $amount['pool'] = round((2*$amountsetpool),2); */
  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function rideStatusChange(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		$rules = [
			'status' => 'required',
			'ride_id' => 'required',
			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
				
 $ride= Ride::query()->where([['id', '=', $_REQUEST['ride_id']]])->first();
        
        
		
		
	
			if(!empty($ride))
			{
				if($request->status == 1)
				{
					
					if($ride['status'] == 1)
				{
				return response()->json(['message'=>"Ride already Accepted"], $this->warningCode);
				}	
						$title = 'Ride Accepted';
		$message = 'Your booking accepted by the driver please check the driver detail';
			
		 $userdata= User::query()->where([['id', '=', $ride['user_id']]])->first();
		$deviceToken = $userdata['device_token'];
	$ride_id = $_REQUEST['ride_id'];
	$type = 2;
		$additional = ['type'=>$type,'ride_id'=>$ride_id];
	
		
		$deviceType = $userdata['device_type'];
			if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdata['id'];
		$notification->save();
					}
					if($deviceType == 'ios') {
						$deviceToken = $userdata['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdata['id'];
		$notification->save();
					}
						$checkride = Ride::query()->where([['driver_id', '=', $user_id],['status', '=', 0],['car_type', '=', 4]])->first();
			//print_r($checkride);
			if(!empty($checkride))
			{
				
				$ride->pool_number = $checkride['pool_number'];
			}
				$ride->status = 1;
				$ride->driver_id = $user_id;
				$message = "Ride Accepted Successfully";
				}
				if($request->status == -1)
				{
					$driverids = explode(',',$ride['driver_id']);
					//$driverids = array_diff($driverids,$user_id);
					if (($key = array_search($user_id, $driverids)) !== false) {
    unset($driverids[$key]);
}
					if(!empty($driverids))
					{
						$ride->driver_id = implode(",",$driverids);
					}
					else
					{
						$ride->driver_id = "";
					}
				$message = "Ride Rejected Successfully";
				}
			if($request->status == 2)
				{
					
					if($ride['status'] == 2)
				{
				//return response()->json(['message'=>"Ride already Started"], $this->warningCode);
				}	
						$title = 'Ride Started';
		$message = 'Your Ride Started';
			
		 $userdata= User::query()->where([['id', '=', $ride['user_id']]])->first();
		$deviceToken = $userdata['device_token'];
	$ride_id = $_REQUEST['ride_id'];
	$type = 3;
		$additional = ['type'=>$type,'ride_id'=>$ride_id];
	
		
		$deviceType = $userdata['device_type'];
		/* echo $deviceType; 
		echo $deviceToken; die; */
			if($deviceType == 'android') {
			//	echo "If conditon"; die;
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdata['id'];
		$notification->save();
					}
					if($deviceType == 'ios') {
			//	echo "If conditon"; die;
			$deviceToken = $userdata['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdata['id'];
		$notification->save();
					}
				$ride->status = 2;
				$message = "Ride Started Successfully";
				}
				if($request->status == 3)
				{
					
					if($ride['status'] == 3)
				{
				return response()->json(['message'=>"Ride already Completed"], $this->warningCode);
				}	
						$title = 'Ride Completed';
		$message = 'Your Ride Completed';
			
		 $userdata= User::query()->where([['id', '=', $ride['user_id']]])->first();
		$deviceToken = $userdata['device_token'];
	$ride_id = $_REQUEST['ride_id'];
	$type = 4;
		$additional = ['type'=>$type,'ride_id'=>$ride_id];
	
		
		$deviceType = $userdata['device_type'];
		/* echo $deviceType; 
		echo $deviceToken; die; */
			if($deviceType == 'android') {
			//	echo "If conditon"; die;
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdata['id'];
		$notification->save();
					}
					if($deviceType == 'ios') {
			//	echo "If conditon"; die;
			$deviceToken = $userdata['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdata['id'];
		$notification->save();
					}
					
				$ride->status = 3;
				$message = "Ride Completed Successfully";
				}
				if($request->status == -2)
				{
					
					if($ride['status'] == -2)
				{
				return response()->json(['message'=>"Ride Cancelled"], $this->warningCode);
				}	
						$title = 'Ride Cancelled';
		$message = 'Your Ride Cancelled';
			
		 $userdata= User::query()->where([['id', '=', $ride['user_id']]])->first();
		$deviceToken = $userdata['device_token'];
	$ride_id = $_REQUEST['ride_id'];
		$additional = ['type'=>4,'ride_id'=>$ride_id];
	
		
		$deviceType = $userdata['device_type'];
		if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
					}
					if($deviceType == 'ios') {
						$deviceToken = $userdata['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
					}
					
				$ride->status = -2;
				$ride->cancel_reason = $request->cancel_reason;
				$message = "Ride Cancelled Successfully";
				}
				if($request->status == -2)
				{
					
					if($ride['status'] == -2)
				{
				return response()->json(['message'=>"Ride Cancelled"], $this->warningCode);
				}	
						$title = 'Ride Cancelled';
		$message = 'Your Ride Cancelled';
			
		 $userdata= User::query()->where([['id', '=', $ride['user_id']]])->first();
		$deviceToken = $userdata['device_token'];
	$ride_id = $_REQUEST['ride_id'];
		$additional = ['type'=>4,'ride_id'=>$ride_id];
	
		
		$deviceType = $userdata['device_type'];
		if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
					}
			if($deviceType == 'ios') {
				$deviceToken = $userdata['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
					}		
				$ride->status = -2;
				$ride->cancel_reason = $request->cancel_reason;
				$message = "Ride Cancelled Successfully";
				}
					if($request->status == -3)
				{
					
					if($ride['status'] == -3)
				{
				return response()->json(['message'=>"Ride Cancelled already"], $this->warningCode);
				}	
						$title = 'Ride Cancelled';
		$message = 'Your Ride Cancelled by User';
			
		 $driverdata= User::query()->where([['id', '=', $ride['driver_id']]])->first();
		$deviceToken = $driverdata['device_token'];
	$ride_id = $_REQUEST['ride_id'];
		$additional = ['type'=>5,'ride_id'=>$ride_id];
	
		
		$deviceType = $driverdata['device_type'];
		if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
					}
				if($deviceType == 'ios') {
					$deviceToken = $driverdata['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
					}	
				$ride->status = -3;
				$ride->cancel_reason = $request->cancel_reason;
				$message = "Ride Cancelled Successfully";
				}
			}
			
			$ride->save();
		
		
				return response()->json(['message'=>$message,'data'=>$ride], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function rideDetail(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		$rules = [			
			'ride_id' => 'required',			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
				
 $ride= Ride::query()->where([['id', '=', $_REQUEST['ride_id']],['user_id', '=', $user_id]])->first();
        
        
		
		
	
			if(!empty($ride))
			{
				/* $driverData= User::query()->where([['id', '=', $ride['driver_id']]])->first();
				if($ride['status'] == 1)
				{
					$lat1 = $ride['pick_lat'];
            $long1 = $ride['pick_lng'];
            $lat2 = $driverData['current_lat'];
            $long2 = $driverData['current_lng'];
			$distance = $this->getdistancebyDirection($lat1,$long1,$lat2,$long2);
			if(!empty($distance))
			{
				//$ride->distance = round($distance['distance'],2);
				$ride['duration'] = $distance['duration'];
			}
				}
			$ride['driver_data'] = $driverData;
			$ride['driver_data']['rating'] = '';
			$vehicle_detail= Vehicle::query()->where([['user_id', '=', $ride['driver_id']]])->first();
			$ride['driver_data']['vehicle_info'] = $vehicle_detail; */
			}
			else
			{
				return response()->json(['message'=>'Ride Not found'], $this->warningCode);
			}
			
		
		
				return response()->json(['message'=>'Ride Detail Got Successfully','data'=>$ride], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function driverDetail(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		$rules = [			
			'ride_id' => 'required',			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
				
 $ride= Ride::query()->where([['id', '=', $_REQUEST['ride_id']],['user_id', '=', $user_id]])->first();
        
        
		
		
	
			if(!empty($ride))
			{
				$driverData= User::query()->where([['id', '=', $ride['driver_id']]])->first();
				
				if(!empty($driverData))
				{
				if($ride['status'] == 1)
				{
					$lat1 = $ride['pick_lat'];
            $long1 = $ride['pick_lng'];
            $lat2 = $driverData['current_lat'];
            $long2 = $driverData['current_lng'];
			$distance = $this->getdistancebyDirection($lat1,$long1,$lat2,$long2);
			if(!empty($distance))
			{
				//$ride->distance = round($distance['distance'],2);
				$ride['duration'] = $distance['duration'];
			}
				}
			$ride['driver_data'] = $driverData;
			$avgrating = DB::table('ratings')->where('to_id', $ride['user_id'])->avg('rating');
				$avgrating = round($avgrating,2);
			$ride['driver_data']['rating'] = "$avgrating";
			$vehicle_detail= Vehicle::query()->where([['user_id', '=', $ride['driver_id']]])->first();
			$ride['driver_data']['vehicle_info'] = $vehicle_detail;
				}
				
			else
			{
				$ride['driver_data'] = array();
			}
			
			$rating_data = Rating::query()->where([['ride_id', '=', $ride['id']],['from_id', '=', $ride['user_id']]])->get()->toArray();
				if(!empty($rating_data))
				{
				$ride['rating_data'] = $rating_data;
				}
				else
				{
					$ride['rating_data'] = array();
				}
			}
			else
			{
				return response()->json(['message'=>'Ride Not found'], $this->warningCode);
			}
			
		
		
				return response()->json(['message'=>'Ride Detail Got Successfully','data'=>$ride], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function customerDetail(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
	
		$rules = [			
			'ride_id' => 'required',			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		try {
				
 $ride= Ride::query()->where([['id', '=', $_REQUEST['ride_id']],['driver_id', '=', $user_id]])->first();
        
        
		
		
	
			if(!empty($ride))
			{
				if($ride['car_type'] == 4)
				{
					$pool_number = $ride['pool_number'];
					$pool_rides = Ride::query()->where([['pool_number', '=', $pool_number],['driver_id', '=', $user_id]])->get()->toArray();
					$userdatanew = array();
					$i = 0;
					foreach($pool_rides as $pool_ride)
					{
						$userdatanew[$i] =  User::query()->where([['id', '=', $pool_ride['user_id']]])->first();
						$userdatanew[$i]['pick_lat'] = $pool_ride['pick_lat'];
						$userdatanew[$i]['pick_lng'] = $pool_ride['pick_lng'];
						$userdatanew[$i]['dest_lat'] = $pool_ride['dest_lat'];
						$userdatanew[$i]['dest_lng'] = $pool_ride['dest_lng'];
						$userdatanew[$i]['pickup_address'] = $pool_ride['pickup_address'];
						$userdatanew[$i]['dest_address'] = $pool_ride['dest_address'];
						$userdatanew[$i]['rating'] = "";
						$userdatanew[$i]['review_count'] = "";
						$i++;
					}
					/* $userData = User::query()->where([['id', '=', $ride['user_id']]])->first();
			$ride['user_data'] = $userData; */
			/* $ride['user_data']['rating'] = "";
			$ride['user_data']['review_count'] = ""; */
			$ride['user_data'] = $userdatanew;
				}
				else
				{
					
					$userDatas= User::query()->where([['id', '=', $ride['user_id']]])->get()->toArray();
					$userdatanew = array();
					$i = 0;
					foreach($userDatas as $userD)
					{
						$userdatanew[$i] =  $userD;
						$userdatanew[$i]['pick_lat'] = "";
						$userdatanew[$i]['pick_lng'] = "";
						$userdatanew[$i]['dest_lat'] = "";
						$userdatanew[$i]['dest_lng'] = "";
						$userdatanew[$i]['pickup_address'] = "";
						$userdatanew[$i]['dest_address'] = "";
						$userdatanew[$i]['rating'] = "";
						$userdatanew[$i]['review_count'] = "";
						$i++;
					}
			$ride['user_data'] = $userdatanew;
				}
				
			}
			else
			{
				return response()->json(['message'=>'Ride Not found'], $this->warningCode);
			}
			
		
		
				return response()->json(['message'=>'Ride Detail Got Successfully','data'=>$ride], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function addVehicle(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'year' => 'required',
			'model' => 'required',
			'color' => 'required',
			'insurance_company' => 'required',
			'certificate_number' => 'required',
			'policy_number' => 'required',
			'issue_date' => 'required',
			'expiry_date' => 'required',
			
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$vehicle = new Vehicle();
			
			$vehicle->year = $request->year;
            $vehicle->model = $request->model;
            $vehicle->color = $request->color;
            $vehicle->insurance_company = $request->insurance_company;
            $vehicle->policy_number = $request->policy_number;
            $vehicle->certificate_number = $request->certificate_number;
            $vehicle->issue_date = $request->issue_date;
            $vehicle->expiry_date = $request->expiry_date;
           
			  if(!empty($_FILES['driving_license'])){

                if(isset($_FILES['driving_license']) && $_FILES['driving_license']['name'] !== '' && !empty($_FILES['driving_license']['name'])){
                    $file = $_FILES['driving_license'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['driving_license']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->driving_license = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
			if(!empty($_FILES['vehicle_rc'])){

                if(isset($_FILES['vehicle_rc']) && $_FILES['vehicle_rc']['name'] !== '' && !empty($_FILES['vehicle_rc']['name'])){
                    $file = $_FILES['vehicle_rc'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['vehicle_rc']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->vehicle_rc = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
			if(!empty($_FILES['vehicle_image'])){

                if(isset($_FILES['vehicle_image']) && $_FILES['vehicle_image']['name'] !== '' && !empty($_FILES['vehicle_image']['name'])){
                    $file = $_FILES['vehicle_image'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['vehicle_image']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->vehicle_image = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
			if(!empty($_FILES['vehicle_number_plate'])){

                if(isset($_FILES['vehicle_number_plate']) && $_FILES['vehicle_number_plate']['name'] !== '' && !empty($_FILES['vehicle_number_plate']['name'])){
                    $file = $_FILES['vehicle_number_plate'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['vehicle_number_plate']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->vehicle_number_plate = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
	
           
            $vehicle->user_id = $user_id;
          unset($vehicle->created_at);		
            unset($vehicle->updated_at);
			//print_r($place); die;
            $vehicle->save();
				$user->step = 2;
			
				$user->save();
		
				return response()->json(['message'=>'Vehicle Info Added successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function notificationRead(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		
		
		try {
				
        
			$values = Notification::where('user_id', $user_id)->update(['status'=>1]);
				
		
				return response()->json(['message'=>'Notification Updated successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function updateVehicle(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'vehicle_id' => 'required',
			
			
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
				$vehicle = Vehicle::query()->where([['user_id', '=', $user_id],['id', '=', $_REQUEST['vehicle_id']]])->first();
			if(!empty($request->year)){
                $vehicle->year = $request->year;
            }
			if(!empty($request->model)){
                $vehicle->model = $request->model;
            }
			if(!empty($request->color)){
                $vehicle->color = $request->color;
            }	
			if(!empty($request->year)){
                $vehicle->year = $request->year;
            }	
			if(!empty($request->insurance_company)){
                $vehicle->insurance_company = $request->insurance_company;
            }	
			if(!empty($request->certificate_number)){
                $vehicle->certificate_number = $request->certificate_number;
            }	
			if(!empty($request->policy_number)){
                $vehicle->policy_number = $request->policy_number;
            }	
			if(!empty($request->year)){
                $vehicle->year = $request->year;
            }	
			if(!empty($request->issue_date)){
                $vehicle->issue_date = $request->issue_date;
            }	
			if(!empty($request->expiry_date)){
                $vehicle->expiry_date = $request->expiry_date;
            }	
			
			
           
			  if(!empty($_FILES['driving_license'])){

                if(isset($_FILES['driving_license']) && $_FILES['driving_license']['name'] !== '' && !empty($_FILES['driving_license']['name'])){
                    $file = $_FILES['driving_license'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['driving_license']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->driving_license = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
			if(!empty($_FILES['vehicle_rc'])){

                if(isset($_FILES['vehicle_rc']) && $_FILES['vehicle_rc']['name'] !== '' && !empty($_FILES['vehicle_rc']['name'])){
                    $file = $_FILES['vehicle_rc'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['vehicle_rc']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->vehicle_rc = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
			if(!empty($_FILES['vehicle_image'])){

                if(isset($_FILES['vehicle_image']) && $_FILES['vehicle_image']['name'] !== '' && !empty($_FILES['vehicle_image']['name'])){
                    $file = $_FILES['vehicle_image'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['vehicle_image']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->vehicle_image = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
			if(!empty($_FILES['vehicle_number_plate'])){

                if(isset($_FILES['vehicle_number_plate']) && $_FILES['vehicle_number_plate']['name'] !== '' && !empty($_FILES['vehicle_number_plate']['name'])){
                    $file = $_FILES['vehicle_number_plate'];
                    $file = preg_replace("/[^a-zA-Z0-9.]/", "", $file['name']);
                    $filename = time().'-'.$file;
                    $ext = substr(strtolower(strrchr($file, '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif','png'); //set allowed extensions
					
                    if(in_array($ext, $arr_ext))
                    {
                    $path="public/images/user_image/";
                    if(move_uploaded_file($_FILES['vehicle_number_plate']['tmp_name'],$path.$filename)){
						$url = URL::to('/');
                        $vehicle->vehicle_number_plate = $url."/".$path.$filename;
                    }
                    }else{
						
			
                        return response()->json(['message'=>'Upload valid image'], $this->warningCode);
                    }
				}
            }
	
           
          
          unset($vehicle->created_at);		
            unset($vehicle->updated_at);
			//print_r($place); die;
            $vehicle->save();
				
		
				return response()->json(['message'=>'Vehicle Updated successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function updateBankdetail(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		/* $rules = [
			'vehicle_id' => 'required',
			
			
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        } */
		
		try {
				$bankdetail = BankDetail::query()->where([['user_id', '=', $user_id]])->first();
				if(!empty($bankdetail))
				{
				}
				else
				{
					$bankdetail = new BankDetail();
				}
			if(!empty($request->bank_name)){
                $bankdetail->bank_name = $request->bank_name;
            }
			if(!empty($request->account_number)){
                $bankdetail->account_number = $request->account_number;
            }
			if(!empty($request->account_name)){
                $bankdetail->account_name = $request->account_name;
            }
			if(!empty($request->ifsc_code)){
                $bankdetail->ifsc_code = $request->ifsc_code;
            }
			if(!empty($request->phone_number)){
                $bankdetail->phone_number = $request->phone_number;
            }
			
			$bankdetail->user_id = $user_id;
          
          unset($bankdetail->created_at);		
            unset($bankdetail->updated_at);
			//print_r($place); die;
            $bankdetail->save();
				
		
				return response()->json(['message'=>'Bank Detail Updated successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function driverClassList(){
		
		
         $resnewarray= Driverclass::query()->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				
				$newresultarray[$i] = $result;
				
				$i++;
			}
			 
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found','data'=>$newresultarray], $this->successCode);
			}
			
        
    }
	public function place_list(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Place::query()->where([['user_id', '=', $user_id]])->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				
				$newresultarray[$i] = $result;
				
				$i++;
			}
			 
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found','data'=>$newresultarray], $this->successCode);
			}
			
        
    }
	public function notification_list(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Notification::query()->where([['user_id', '=', $user_id]])->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				
				$newresultarray[$i] = $result;
				
				$i++;
			}
			 
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found','data'=>$newresultarray], $this->successCode);
			}
			
        
    }
	 public function rideTypes(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		
		 
		
		try {
			
 $resnewarray= Price::query()->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				
				
				$i++;
			}
			}

  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	 public function price_list(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'pick_lat' => 'required',
			'pick_lng' => 'required',
			'dest_lat' => 'required',
			'dest_lng' => 'required',
		
        ];
		 
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
				$lon1 = $_REQUEST['pick_lng'];
				$lon2 = $_REQUEST['dest_lng'];
				$lat1 = $_REQUEST['pick_lat'];
				$lat2 = $_REQUEST['dest_lat'];
			/* 	$theta = $lon1 - $lon2;
			$dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
  $dist = acos($dist);
  $dist = rad2deg($dist);
  $miles = $dist * 60 * 1.1515;
  $kilometers = $miles * 1.609344; */
  //$settings = $this->Setting->findById(1);
  $distance = $this->getdistancebyDirection($lat1,$lon1,$lat2,$lon2);
  if($distance == 0)
  {
	  return response()->json(['message'=>'No Driver Found'], $this->warningCode);
  }
 $resnewarray= Price::query()->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				$discount = 0;
				if($result['car_type'] == 1)
				{
					
					//echo $distance; die;
					$price = round(($result['price_per_km'])*($distance['distance']));
					
					if($distance['distance'] > 5 && $distance['distance'] <10)
					{
						$discount = round(($price*14)/100);
					}
					if($distance['distance'] > 10 && $distance['distance'] < 20)
					{
						$discount = round(($price*34)/100);
					}
					if($distance['distance'] > 20 && $distance['distance'] < 25)
					{
						$discount = round(($price*38)/100);
					}
					if($distance['distance'] > 25 && $distance['distance'] < 30)
					{
						$discount = round(($price*40)/100);
					}
					if($distance['distance'] > 30 && $distance['distance'] < 35)
					{
						$discount = round(($price*30)/100);
					}
					if($distance['distance'] > 35)
					{
						$discount = round(($price*40)/100);
					}
					$newresultarray[$i]['price'] = round($price-$discount);
				}
				
				if($result['car_type'] == 4)
				{
					$price = round(($result['price_per_km'])*($distance['distance']));
					if($distance['distance'] > 5 && $distance['distance'] <10)
					{
						$discount = round(($price*14)/100);
					}
					if($distance['distance'] > 10 && $distance['distance'] < 20)
					{
						$discount = round(($price*34)/100);
					}
					if($distance['distance'] > 20 && $distance['distance'] < 25)
					{
						$discount = round(($price*38)/100);
					}
					if($distance['distance'] > 25 && $distance['distance'] < 30)
					{
						$discount = round(($price*40)/100);
					}
					if($distance['distance'] > 30 && $distance['distance'] < 35)
					{
						$discount = round(($price*30)/100);
					}
					if($distance['distance'] > 35)
					{
						$discount = round(($price*40)/100);
					}
					$pooldiscount = (round($discount*30)/100);
					$newresultarray[$i]['price'] = round($price-$discount-$pooldiscount);
				}
				//$currenttime = date('h:i A');
				//echo date_default_timezone_get(); die;
				$duration = $distance['duration'];
				$newresultarray[$i]['time'] = date("h:i:s a", time() + $duration);
				$newresultarray[$i]['distance'] = $distance['distance'];
				
				$i++;
			}
			}
 /*  $amount = array();
  $amount['go'] = round((3*$amountsetgo),2);
  $amount['premier'] = round((4*$amountsetpremier),2);
  $amount['xl'] = round((5*$amountsetxl),2);
  $amount['pool'] = round((2*$amountsetpool),2); */
  
			
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	 public function addCard(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'name' => 'required',
			'card_number' => 'required',
			'expiry' => 'required',
			//'cvv' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$card = new Card();
			
			$card->name = $request->name;
            $card->card_number = $request->card_number;
            $card->expiry = $request->expiry;
          
			if(!empty($request->brand_name))
			{
				$card->brand_name = $request->brand_name;
			}
            
           
           
            $card->user_id = $user_id;
          unset($card->created_at);		
            unset($card->updated_at);
			//print_r($place); die;
			if(!empty($request->save))
			{
				$card->save();
			}
			else
			{
            
			}
		
				return response()->json(['message'=>'Card Added successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function invoice(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'ride_id' => 'required',
						
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				 $where = array('id' => $user_id);
		
        $userdata = User::where($where)->first();
$email = $userdata['email'];
$ride_data= Ride::query()->where([['user_id', '=', $user_id],['id', '=', $request->ride_id]])->first();
$ride_data['email'] = $email;
 $driver_id = array('id' => $ride_data['driver_id']);
		
        $driver_data = User::where($driver_id)->first();
		$otp = rand(1000,9999);
				$data = array('pickup_location' => $ride_data['pickup_address'],'dest_address' => $ride_data['dest_address'],'price' => $ride_data['price'],'payment_type' => $ride_data['payment_type'],'ride_date' => $ride_data['created_at'],'driver_name' => $driver_data['first_name']);
				$ride_id = $request->ride_id;
				$m = Mail::send('invoice', $data, function($message) use ($ride_data) {
					$email = $ride_data['email'];
					$ride_id = $ride_data['id'];
					$message->to($email, 'Invoice')->subject("Invoice #$ride_id");
					
					if(!empty($request->from)){
						$message->from($request->from, 'Haylup');
					}
				});
				return response()->json(['message'=>'Invoice sent successfully to mail'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function raisecomplain(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'ride_type' => 'required',
			'complain_type' => 'required',			
			'message' => 'required',			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$complaint = new Complaint();
			
			$complaint->ride_type = $request->ride_type;
			$complaint->complain_type = $request->complain_type;
            $complaint->message = $request->message;
           
           
           
            $complaint->user_id = $user_id;
          unset($complaint->created_at);		
            unset($complaint->updated_at);
			//print_r($place); die;
			if(!empty($request->save))
			{
				$complaint->save();
			}
			else
			{
            
			}
		
				return response()->json(['message'=>'Your message sent successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function contactAdmin(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'email' => 'required',
			'message' => 'required'			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$contact = new Contact();
			
			$contact->email = $request->email;
            $contact->message = $request->message;
           
           
           
            $contact->user_id = $user_id;
          unset($contact->created_at);		
            unset($contact->updated_at);
			//print_r($place); die;
			if(!empty($request->save))
			{
				$contact->save();
			}
			else
			{
            
			}
		
				return response()->json(['message'=>'Your message sent successfully'], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function complainedTypes(){ 
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= ComplainType::query()->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				
				$newresultarray[$i] = $result;
				
				$i++;
			}
			 
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found','data'=>$newresultarray], $this->successCode);
			}
			
        
    }
	public function card_list(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Card::query()->where([['user_id', '=', $user_id]])->get()->toArray();
        
        
		
		
	 $newresultarray = array();
			if(!empty($resnewarray))
			{
				
			$i = 0;
			
			foreach($resnewarray as $result)
			{
				
				$newresultarray[$i] = $result;
				
				$i++;
			}
			 
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found','data'=>$newresultarray], $this->successCode);
			}
			
        
    }
	public function pages(Request $request){
		/* $user = Auth::user();
			$user_id = $user['id']; */
		$rules = [
			'type' => 'required',
					
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			 $pageddata= Page::query()->where([['type', '=', $request->type]])->first();
		
				return response()->json(['message'=>__('Successfully.'),'data'=>$pageddata], $this->successCode);
			
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function addCart(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'item_id' => 'required',
			'driver_id' => 'required',
			
			
		
        ];
		
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			$drivercheck = Cart::query()->where([['user_id', '=', $user_id]])->first();
		if(!empty($drivercheck))
		{
			$driver_id = $drivercheck['driver_id'];
			$getdriverid = $request->driver_id;
			if($driver_id != $getdriverid)
			{
				return response()->json(['message'=>'You are adding item from different driver'], 402);
			}
		}
		$cart = Cart::query()->where([['user_id', '=', $user_id],['item_id', '=', $request->item_id]])->first();
		$itemcheck = Item::query()->where([['id', '=', $request->item_id]])->first();
		if(!empty($itemcheck))
		{
			$itemqty = $itemcheck['qty'];
			$getqty = $request->qty;
			if(isset($_REQUEST['cart_list']) && $_REQUEST['cart_list'] == 1)
				{
					if($getqty > $itemqty)
			{
				return response()->json(['message'=>"Only $itemqty items available"], $this->warningCode);
			}
				}
				else
				{
					$matchqty = $request->qty+$cart['qty'];
					if($matchqty > $itemqty)
			{
				return response()->json(['message'=>"Only $itemqty items available"], $this->warningCode);
			}
				}
			
		}
			
			if(!empty($cart))
			{
				$msg = "Item Updated Successfully";
				$cart->qty = $request->qty+$cart['qty'];
				if(isset($_REQUEST['cart_list']) && $_REQUEST['cart_list'] == 1)
				{
					$cart->qty = $request->qty;
				}
			}
			else
			{
				$cart = new Cart();
				$cart->item_id = $request->item_id;				
				$cart->driver_id = $request->driver_id;
				$cart->user_id = $user_id;
				$cart->qty = $request->qty;
				$msg = "Item Added to cart Successfully";
			}
			
          if($request->qty == 0)
				{
					$cart->delete();
					$msg = "Item Removed Successfully";
				}
			else
			{
				$cart->save();
			}
			
           
			
				//return response()->json(['message'=>$msg], $this->successCode);
			$cart_count= Cart::where('user_id', '=', $user_id)->count();
		
		 return response()->json(['message'=>$msg,'cart_count'=>$cart_count], $this->successCode);
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function cart_list(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Cart::query()->where([['user_id', '=', $user_id]])->get()->toArray();
        
        
		
		
	 
			if(!empty($resnewarray))
			{
				//$newresultarray[$i]['user_data'] = $this->get_user($result['user_id']);
          //  $this->api_response(200,'Homedata listed successfully',$resnewarray);
		 /*  $resnewarray = array();
		  foreac */
		  
			$i = 0; 
			$newresultarray = array();
			foreach($resnewarray as $result)
			{
				$item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $result['driver_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['cart_qty'] = $result['qty'];
				$newresultarray[$i]['cart_user_id'] = $result['user_id'];
				$newresultarray[$i]['driver_data'] = $driver_data;
				if($newresultarray[$i]['driver_data']['current_lat'] == null)
				{
					$newresultarray[$i]['driver_data']['current_lat'] = "";
				}
				if($newresultarray[$i]['driver_data']['current_lng'] == null)
				{
					$newresultarray[$i]['driver_data']['current_lng'] = "";
				}
				//$newresultarray[$i] = $result;
				/* $item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $item['user_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['driver_data'] = $driver_data; */
				/* $dealimgresults = DealImage::query()->where('deal_images.deal_id',$result['id'])->orderBy('deal_images.id','DESC')->get()->toArray();
				$newresultarray[$i]['deal_images'] = $dealimgresults;
				$views= Click::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['views'] = "$views";
				$purchases= Order::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['purchases'] = "$purchases";
				$avgrating = DB::table('reviews')->where('business_user_id', $result['user_id'])->avg('rating');
				$avgrating = round($avgrating,2);
				$newresultarray[$i]['business_avg_rating'] = "$avgrating"; */
				$i++;
			}
			$cart_count= Cart::where('user_id', '=', $user_id)->count();
		
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray,'cart_count'=>$cart_count,'tax'=>10], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found'], $this->successCode);
			}
			
        
    }
	public function addBooking(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'items' => 'required',
			'driver_id' => 'required',
			'subtotal' => 'required',
			'total_price' => 'required',
			'payment_id' => 'required',
			'payment_type' => 'required',
			
			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$booking = new Booking();
				$booking->items = $request->items;				
				$booking->driver_id = $request->driver_id;
				$booking->user_id = $user_id;
				$booking->subtotal = $request->subtotal;
				$booking->total_price = $request->total_price;
				$booking->payment_id = $request->payment_id;
				$booking->payment_type = $request->payment_type;
				if(!empty($request->promo_discount))
				{
					$booking->promo_discount = $request->promo_discount;
				}
				if(!empty($request->foodfix_points))
				{
					$booking->foodfix_points = $request->foodfix_points;
					
				}
				
				if(!empty($request->foodfix_points_price))
				{
					$booking->foodfix_points_price = $request->foodfix_points_price;
				}
				if(!empty($request->tax))
				{
					$booking->tax = $request->tax;
				}
				
				DB::table('carts')->where('user_id', $user_id)->delete();
				$msg = "Booking Created Successfully";
			
				if($booking->save()) {
					
					if(!empty($request->foodfix_points))
				{
					
					
					$userData = User::where('id', $user_id)->first();
					$earnpoint = $userData['earned_points'];
					$spendpoint = $userData['spent_points'];
					if(!empty($earnpoint))
					{
			$earnpoint = $earnpoint-$request->foodfix_points;
					}
				
			$userData->earned_points = $earnpoint+$request->total_price;	
			
			$userData->spent_points = $spendpoint+$request->foodfix_points;			
			
			$userData->save();
				}
				else 
				{
					
					$userData = User::where('id', $user_id)->first();
					$earnpoint = $userData['earned_points'];
			$userData->earned_points = $earnpoint+$request->total_price;			
			$userData->save();
				}
				}
			$title = 'New Booking';
		$message = 'You Received new booking';
			$driverdetail = User::where('id', '=', $request->driver_id)->first();
		
		$deviceToken = $driverdetail['device_token'];
		$type = 0;
		$additional = ['type'=>$type];
	
		
		$deviceType = $driverdetail['device_type'];
			if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $driverdetail['id'];
		$notification->save();
			}
           if($deviceType == 'ios') {
			   $deviceToken = $driverdetail['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $driverdetail['id'];
		$notification->save();
			}
			$userData = User::where('id', $user_id)->first();
				//return response()->json(['message'=>$msg], $this->successCode);
			//$cart_count= Cart::where('user_id', '=', $user_id)->count();
		
		 return response()->json(['message'=>$msg,'earned_points' => $userData['earned_points'],'spent_points'=>$userData['spent_points']], $this->successCode);
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function checkPromo(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'promo' => 'required',
			
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			$date = date("Y-m-d");
			$promocode = Promocode::query()->where([['start_date', '<=', $date],['end_date', '>=', $date],['code', '=', $request->promo]])->first();
			if(!empty($promocode))
			{
				$msg = "Promocode Found Successfully";
				return response()->json(['message'=>$msg,'data'=>$promocode], $this->successCode);
			}
			else
			{
				
				$msg = "No Promocode Found";
				return response()->json(['message'=>$msg], $this->successCode);
			}
		
		
		 
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function deleteCart(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		
		
       /*  $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        } */
		
		try {
			DB::table('carts')->where('user_id', $user_id)->delete();
			$msg = "Cart Deleted Successfully";
				return response()->json(['message'=>$msg], $this->successCode);
			
		
		 
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function driverbookinglist(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Booking::query()->where([['driver_id', '=', $user_id]])->orderBy('bookings.id','DESC')->get()->toArray();
        
        
		
		
	 
			if(!empty($resnewarray))
			{
				//$newresultarray[$i]['user_data'] = $this->get_user($result['user_id']);
          //  $this->api_response(200,'Homedata listed successfully',$resnewarray);
		 /*  $resnewarray = array();
		  foreac */
		  
			$i = 0; 
			$newresultarray = array();
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				/* $item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $result['driver_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['cart_qty'] = $result['qty'];
				$newresultarray[$i]['cart_user_id'] = $result['user_id'];
				$newresultarray[$i]['driver_data'] = $driver_data; */
				
				//$newresultarray[$i] = $result;
				/* $item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $item['user_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['driver_data'] = $driver_data; */
				/* $dealimgresults = DealImage::query()->where('deal_images.deal_id',$result['id'])->orderBy('deal_images.id','DESC')->get()->toArray();
				$newresultarray[$i]['deal_images'] = $dealimgresults;
				$views= Click::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['views'] = "$views";
				$purchases= Order::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['purchases'] = "$purchases";
				$avgrating = DB::table('reviews')->where('business_user_id', $result['user_id'])->avg('rating');
				$avgrating = round($avgrating,2);
				$newresultarray[$i]['business_avg_rating'] = "$avgrating"; */
				$i++;
			}
			$cart_count= Cart::where('user_id', '=', $user_id)->count();
		
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found'], $this->successCode);
			}
			
        
    }
	public function customerbookinglist(){
		
		$user = Auth::user();
			$user_id = $user['id'];
        $resnewarray= Booking::query()->where([['user_id', '=', $user_id],['status', '=', 1]])->get()->toArray();
        
        
		
		
	 
			if(!empty($resnewarray))
			{
				//$newresultarray[$i]['user_data'] = $this->get_user($result['user_id']);
          //  $this->api_response(200,'Homedata listed successfully',$resnewarray);
		 /*  $resnewarray = array();
		  foreac */
		  
			$i = 0; 
			$newresultarray = array();
			foreach($resnewarray as $result)
			{
				$newresultarray[$i] = $result;
				$driver_data = User::where(['id' => $result['driver_id']])->first();
				$newresultarray[$i]['driver_data'] = $driver_data;
				/* $item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $result['driver_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['cart_qty'] = $result['qty'];
				$newresultarray[$i]['cart_user_id'] = $result['user_id'];
				$newresultarray[$i]['driver_data'] = $driver_data; */
				
				//$newresultarray[$i] = $result;
				/* $item = Item::where(['id' => $result['item_id']])->first();
				
				$driver_data = User::where(['id' => $item['user_id']])->first();
				$newresultarray[$i] = $item;
				$newresultarray[$i]['driver_data'] = $driver_data; */
				/* $dealimgresults = DealImage::query()->where('deal_images.deal_id',$result['id'])->orderBy('deal_images.id','DESC')->get()->toArray();
				$newresultarray[$i]['deal_images'] = $dealimgresults;
				$views= Click::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['views'] = "$views";
				$purchases= Order::where('deal_id', '=', $result['id'])->count();
				$newresultarray[$i]['purchases'] = "$purchases";
				$avgrating = DB::table('reviews')->where('business_user_id', $result['user_id'])->avg('rating');
				$avgrating = round($avgrating,2);
				$newresultarray[$i]['business_avg_rating'] = "$avgrating"; */
				$i++;
			}
			$cart_count= Cart::where('user_id', '=', $user_id)->count();
		
		 return response()->json(['message'=>__('Successfully.'),'data'=>$newresultarray], $this->successCode);
			
			}
			else
			{
				return response()->json(['message'=>'No data found'], $this->successCode);
			}
			
        
    }
	public function orderstatuschange(Request $request){
		
		//Helper::send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'booking_id' => 'required',
			'status' => 'required',			
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
				$booking = Booking::where('id', '=', $request->booking_id)->first();
				$booking->status = $request->status;				
				$booking->save();
				if($request->status == 1)
				{
					$title = 'Booking Accepted';
		$message = 'Booking Accepted By Driver';
					$msg = "Booking Accepted Successfully";
					$booking = Booking::where('id', '=', $request->booking_id)->first();
					$driver_data = User::where(['id' => $booking['driver_id']])->first();
					$driver_data['driver_time'] = "5";
					$driver_data['ongoing_orders'] = "2";
					$additional = ['type'=>1,'driver_data'=>$driver_data];	
				}
				else
				{
					$title = 'Booking Rejected';
		$message = 'Booking Rejected By Driver';
					$msg = "Booking Rejected Successfully";
					$type = 2;
					$additional = ['type'=>$type];
				}
		$userdetail = User::where('id', '=', $booking['user_id'])->first();
		
		$deviceToken = $userdetail['device_token'];
		
	
		
		$deviceType = $userdetail['device_type'];
			if($deviceType == 'android') {
		send_notification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdetail['id'];
		$notification->save();
			}
			if($deviceType == 'ios') {
				$deviceToken = $userdetail['fcm_token'];
		send_iosnotification($title, $message, $deviceToken, '',$additional,true,false,$deviceType,[]);
		$notification = new Notification();
		$notification->title = $title;
		$notification->description = $message;
		$notification->type = $type;
		$notification->user_id = $userdetail['id'];
		$notification->save();
			}
			
		 return response()->json(['message'=>$msg], $this->successCode);
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	
	public function instantRide(Request $request){
		$rules = [
            'start_location' => 'required',
            //'drop_location' => 'required',
         ];
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$input['pickup_address']=$request->start_location;
		if(!empty($request->drop_location))
		{
		$input['dest_address']=$request->drop_location;
		}
		if(!empty($request->pick_lat))
		{
		$input['pick_lat']=$request->pick_lat;
		}
		if(!empty($request->pick_lng))
		{
		$input['pick_lng']=$request->pick_lng;
		}
		if(!empty($request->dest_lat))
		{
		$input['dest_lat']=$request->dest_lat;
		}
		if(!empty($request->dest_lng))
		{
		$input['dest_lng']=$request->dest_lng;
		}
		if(!empty($request->passanger))
		{
		$input['passanger']=$request->passanger;
		}
		if(!empty($request->payment_type))
		{
		$input['payment_type']=$request->payment_type;
		}
		$input['ride_type']=3;
		$input['ride_time']=date('Y-m-d H:i:s');
		$input['user_id']=Auth::user()->id;
		$ride=\App\Ride::create($input);
		 return response()->json(['success'=>true,'message'=>'Instant ride created successfully.','data'=>$ride],$this->successCode);

	}

	public function sharingRide(Request $request){
		$rules = [
            'pick_lat' => 'required',
            'pick_lng' => 'required',
           // 'pickup_address' => 'required',
            'start_location' => 'required',
           // 'drop_location' => 'required',
            'number_of_passanger' => 'required',
         ];
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$input['pick_lat'] = $request->pick_lat;
            $input['pick_lng'] = $request->pick_lng;
			if(!empty($request->dest_address))
		{
		$input['dest_address']=$request->dest_address;
		}
			if(!empty($request->dest_lat))
			{
            $input['dest_lat'] = $request->dest_lat;
			}
			if(!empty($request->dest_lng))
			{
            $input['dest_lng'] = $request->dest_lng;
			}
            
			/* if(!empty($request->dest_address))
			{
            $input['dest_address'] = $request->dest_address;
			} */
			if(!empty($request->number_of_passanger))
			{
			$input['passanger'] =$request->number_of_passanger;
			}
			if(!empty($request->schedule_time))
			{
			$input['schedule_time'] =$request->schedule_time;
			}
		$input['pickup_address']=$request->start_location;
		//$input['dest_address']=$request->drop_location;
		$input['ride_type']=4;
		$input['ride_time']=date('Y-m-d H:i:s');
		$input['user_id']=Auth::user()->id;
		$ride=\App\Ride::create($input);
		 return response()->json(['success'=>true,'message'=>' Ride for share created successfully.','data'=>$ride],$this->successCode);

	}
	
	public function createTrip(Request $request){
		$rules = [
            'start_location' => 'required',
            //'drop_location' => 'required',
            'car_type' => 'required',
            'time' => 'required',
			//'driver_id'=>'required'
         ];
		
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		if(!empty($request->drop_location))
		{
		$input['dest_address']=$request->drop_location;
		}
			if(!empty($request->dest_lat))
			{
            $input['dest_lat'] = $request->dest_lat;
			}
			if(!empty($request->dest_lng))
			{
            $input['dest_lng'] = $request->dest_lng;
			}
            
			if(!empty($request->dest_address))
			{
            $input['dest_address'] = $request->dest_address;
			}
			if(!empty($request->passanger))
			{
			$input['passanger'] =$request->passanger;
			}
			if(!empty($request->schedule_time))
			{
			$input['schedule_time'] =$request->schedule_time;
			}
			if(!empty($request->alert_time))
			{
			$input['alert_time'] =$request->alert_time;
			}
			if(!empty($request->note))
			{
			$input['note'] =$request->note;
			}
		$input['pickup_address']=$request->start_location;
		//$input['dest_address']=$request->drop_location;
		$input['ride_type']=4;
		$input['ride_time']=$request->time;
		$input['user_id']=Auth::user()->id;
		if(!empty($request->driver_id))
			{
		$input['driver_id']=$request->driver_id;
			}
		$ride=\App\Ride::create($input);
		 return response()->json(['success'=>true,'message'=>'Trip created successfully.','data'=>$ride],$this->successCode);

	}
	
	public function rideForSharing(Request $request){
		$rules = [
            'time' => 'required',
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$rides=Ride::where('ride_type',4)->where('ride_time',$request->time)->paginate(10);
		return response()->json(['success'=>true,'message'=>'get successfully.','data'=>$rides],$this->successCode);

	}
	
	public function cancelRide(Request $request){
		$rules = [
            'ride_id' => 'required',
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
         $user=Auth::user()->id;
		$result=Ride::where('id',$request->ride_id)->where('user_id',$user)->update(['status'=> -1]);
		if($result>0){
			return response()->json(['success'=>true,'message'=>'Ride cancelled successfully.'],$this->successCode);
		}
	}
	
	
	public function carList(){
		$categories=\App\Category::with('cars')->get();
		return response()->json(['success'=>true,'message'=>'get car list successfully.','data'=>$categories],$this->successCode);

	}
	
	
	public function setPassword(Request $request){
		$rules = [
            'password' => 'required',
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
			$userId=Auth::user()->id;
			$input['password']=Hash::make($request['password']);
			\App\User::where('id',$userId)->update($input);
			$userData=\App\User::where('id',$userId)->first();
			$userData->AauthAcessToken()->delete();
			$token =  $userData->createToken('auth')->accessToken;
			$input = $request->all();
			return response()->json(['success'=>true,'message'=>'Password set successfully.','data'=>$userData,'token'=>$token],$this->successCode);

		
	}
	
	public function saveSelectedCar(Request $request){
		$rules = [
            'car_id' => 'required',
            'mileage'=>'required'
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }

        $vehicle=\App\Vehicle::where('id',$request->car_id)->first();
        if(!empty($vehicle)){
        	$vehicle->update(['mileage'=>$request->mileage]);
 		return response()->json(['success'=>true,'message'=>'Selected card saved successfully.'],$this->successCode);
        }else{
			return response()->json(['message'=>'record not found'], $this->errorCode);
        }
}


	public function getCurrentUserType(){
		$userId=Auth::user()->id;
		$user=\App\User::where('id',$userId)->first();
		if($user->is_master==1){
			$userType="Master Driver";
		}else{
			$userType="Regular Driver";

		}
		return response()->json(['success'=>true,'message'=>'success.','date'=>$userType],$this->successCode);
	}


	public function getSavedLocation(){
		$userId=Auth::user()->id;
		$savedLocation=\App\Ride::where('id',$userId)->paginate(10);
		if(count($savedLocation)>0){
			return response()->json(['success'=>true,'message'=>'success.','date'=>$userType],$this->successCode);
		}else{
			return response()->json(['message'=>'Location not found'], $this->errorCode);
		}
	}
	
	public function changeDefaultHomeWorkLocation(Request $request){
		$rules = [
            'location_type' => 'required',
            'lat'=>'required',
            'long'=>'required',
            'name'=>'required',
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$userId=Auth::user()->id;
		$result=\App\User::where('user_id',$userId)->update([
		'location_type'=>$request->location_type,
		'pick_lat'=>$request->lat,
		'pick_lng'=>$request->long,
		'pickup_address'=>$request->name
		]);
		
		
	}
	
	public function completeRide(Request $request){
		$rules = [
            'ride_id' => 'required',
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
         $userId=Auth::user()->id;
		$result=Ride::where('id',$request->ride_id)->where('user_id',$userId)->update(['status'=> 3]);
		if($result>0){
			return response()->json(['success'=>true,'message'=>'Ride completed successfully.'],$this->successCode);
		}
	}
	
	public function rateRide(Request $request){
		try {
		$rules = [
            'ride_id' => 'required',
            'to_user_id'=>'required',
            'rating'=>'required',
            'review'=>'required',
         ];
		$validator = Validator::make($request->all(), $rules);
		if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
			$input=$request->all();
			$input['to_id']=$request->to_user_id;
			$input['from_id']=Auth::user()->id;
			$rating=\App\Rating::create($input);
			return response()->json(['success'=>true,'message'=>'success.','date'=>$rating],$this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function acceptRejectRide(Request $request){
		try {
			$rules = [
				'status' => 'required',
				'ride_id' => 'required',
			  ];
			
			$validator = Validator::make($request->all(), $rules);
			if ($validator->fails()) {
				return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
			}
		
			$ride=\App\Ride::where('id',$request->ride_id)->first();
			if(!empty($ride)){
				if($ride->status==1 && $request->status==1){
					return response()->json(['message'=>"Ride already Accepted"], $this->warningCode);
			}else if($request->status==1){
				\App\Ride::where('id',$request->ride_id)->update(['status'=>$request->status]);
				return response()->json(['success'=>true,'message'=>'Ride Accepted Successfully.'],$this->successCode);
			}
			else if($ride->status==2 && $request->status==2){
				return response()->json(['message'=>"Ride already Rejected"], $this->warningCode);
			}else if($request->status==2){
				\App\Ride::where('id',$request->ride_id)->update(['status'=>$request->status]);
				return response()->json(['success'=>true,'message'=>'Ride Rejected Successfully.'],$this->successCode);
			}
			}else{
				return response()->json(['message'=>'Record not found'], $this->errorCode);
			}
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function checkRegisteredUser(Request $request){
		try{
			
		$rules = [
			'phone' => 'required',
			'country_code' => 'required',
		 ];
		 $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$user=\App\User::where('phone',$request->phone)->where('country_code',$request->country_code)->first();
		if(!empty($user) && $user!=null){
			return response()->json(['message'=>'You are already registered with this phone number','data'=>$user], $this->successCode);
		}else{
			return response()->json(['message'=>'Not Registered'], $this->successCode);
		}
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
		
	}
	
	public function paymentReceived(Request $request){
		try{
			$rules = [
				'amount' => 'required',
				'mode_of_payment' => 'required',
			 ];
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	
	
	public function startInstantRide(Request $request){
		try{
			$rules = [
				'pickup_location' => 'required',
				//'promotion'=>'required'
			 ];
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$input=$request->all();
		$userId=Auth::user()->id;
		if(!empty($request->user_id))
		{
		$input['user_id']=$request->user_id;
		}
		$input['pickup_address']=$request->pickup_location;
		//$ride->dest_address=$request->drop_off_location;
		//$ride->pick_lat = $request->pick_lat;
         //   $ride->pick_lng = $request->pick_lng;
			if(!empty($request->drop_off_location))
		{
		$input['dest_address']=$request->drop_off_location;
		}
		if(!empty($request->promotion))
		{
		$input['promotion']=$request->promotion;
		}
		if(!empty($request->payment_type))
		{
		$input['payment_type']=$request->payment_type;
		}
		if(!empty($request->pick_lat))
			{
            $input['pick_lat'] = $request->pick_lat;
			}
			if(!empty($request->pick_lng))
			{
            $input['pick_lng'] = $request->pick_lng;
			}
			if(!empty($request->dest_lat))
			{
            $input['dest_lat'] = $request->dest_lat;
			}
			if(!empty($request->dest_lng))
			{
            $input['dest_lng'] = $request->dest_lng;
			}
		
		$ride=\App\Ride::create($input);
		return response()->json(['success'=>true,'message'=>'Instant ride started successfully','data'=>$ride],$this->successCode);

		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function getPromotion(){
		$userId=Auth::user()->id;
		$promotions=\App\Promotion::get();
		if(count($promotions)>0){
		return response()->json(['success'=>true,'message'=>'get successfully','data'=>$promotions],$this->successCode);
		}else{
			return response()->json(['message'=>'Record Not found'], $this->warningCode);
		}
	}
	public function addLocation(Request $request){
		$user = Auth::user();
			$user_id = $user['id'];
		$rules = [
			'title' => 'required',
			'lat' => 'required',
			'lng' => 'required',
			'type' => 'required',
		
        ];
		
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>trans('api.required_data'),'error'=>$validator->errors()], $this->warningCode);            
        }
		
		try {
			
			
			
			
			$location = SaveLocation::where([['type', '=', $_REQUEST['type']],['user_id', '=', $user_id]])->first();
			if(!empty($location))
			{
				
			}
			else
			{
			
				$location = new SaveLocation();
			}
			if($_REQUEST['type'] == 3)
			{
				$location = new SaveLocation();
			}
			$location->lat = $request->lat;
            $location->lng = $request->lng;
            $location->title = $request->title;
            $location->type = $request->type;
            
           
           
            $location->user_id = $user_id;
            unset($location->created_at);		
            unset($location->updated_at);		
            
			
			
            if($location->save())
			{
			
		
			
				return response()->json(['message'=>'Location Added successfully'], $this->successCode);
			}
			else
			{
				return response()->json(['message'=>'Something went wrong'], $this->warningCode);
			}
			
		} catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	public function getLocations(){
		$userId=Auth::user()->id; 
		$locations=SaveLocation::where('user_id',$userId)->get();
		if(count($locations)>0){
		return response()->json(['success'=>true,'message'=>'get successfully','data'=>$locations],$this->successCode);
		}else{
			return response()->json(['message'=>'Record Not found'], $this->warningCode);
		}
	}
	
	public function getUserByPhone(Request $request){
		try{
			$rules = [
				'country_code'=>'required',
				'phone' => 'required'
			 ];
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$user=\App\User::select('id','first_name','last_name','email','country_code','phone','image')
		->where('phone',$request->phone)->first();
        
		$phonenum = $request->phone;
		
		//$userData= DB::table('user_data')->where(['driver_id'=>561])->whereRaw("JSON_CONTAINS(JSON_EXTRACT(phone_numbers, '$.country_code'), '\"{$color}\"')")->first();
		$userData= DB::table('user_data')->where(['driver_id'=>561])->whereJsonContains('phone_numbers', ['phone' => $phonenum])->first();
		//\''.$request->phone.'\'
		//->whereRaw('json_contains(phone_numbers->phone, "453533443")')
		echo '<pre>';
		print_r($userData);
		exit;
		
		if(empty($user) && empty($userData)){
			return response()->json(['message'=>'Record Not found'], $this->warningCode);
		}
			
		if(!empty($userData)){
			$user=\App\User::select('id','first_name','last_name','email','country_code','phone','image')
		->where('id',$userData->user_id)->first();
			 $user['phone_numbers']=json_decode($userData->phone_numbers);
        	$user['emails']=json_decode($userData->email);
			$user['addresses']=json_decode($userData->addresses);
			$user['favourite_address']=json_decode($userData->favourite_address);
		}
				return response()->json(['success'=>true,'message'=>'get successfully','data'=>$user],$this->successCode);

		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	public function RideList(Request $request){
		try{
			$rules = [
				'type'=>'required',
			 ];
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$userId=Auth::user()->id;
		$user=\App\User::where('id',$userId)->first();
		if(!empty($user)){
			if($request->type==1){
		if($user->user_type==1){
			$rides=Ride::where('user_id',$userId)->whereDate('rides.ride_time','>=',Carbon::today())->with('user')->paginate($this->limit);
		}elseif($user->user_type==2){
			$rides=Ride::where('driver_id',$userId)->whereDate('rides.ride_time','>=',Carbon::today())->with('driver')->paginate($this->limit);
		}
		}
		
		elseif($request->type==2){
				if($user->user_type==1){
			$rides=Ride::where('user_id',$userId)->where('status',3)->with('user')->paginate($this->limit);
		}elseif($user->user_type==2){
			$rides=Ride::where('driver_id',$userId)->where('status',3)->with('driver')->paginate($this->limit);
		}
			}
			
			elseif($request->type==3){
				if($user->user_type==1){
				$rides=Ride::where('user_id',$userId)->where('status',-1)->with('user')->paginate($this->limit);
			}elseif($user->user_type==2){
			$rides=Ride::where('driver_id',$userId)->where('status',-1)->with('driver')->paginate($this->limit);
		}
			}
		return response()->json(['success'=>true,'message'=>'get successfully','data'=>$rides],$this->successCode);
		}else{
			return response()->json(['message'=>'Record Not found'], $this->warningCode);
		}
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
	
	
	public function saveUserData(Request $request){

		try{
			$rules = [
				'first_name'=>'required',
				'image'=>'required',
				'phone_numbers'=>'required',
			];
		$validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['message'=>$validator->errors()->first(),'error'=>$validator->errors()], $this->warningCode);            
        }
		$input=$request->all();	
			$user=\App\User::create(['first_name'=>$input['first_name'],'last_name'=>$input['last_name'],'user_type'=>4,'email'=>null]);
			if(!empty($request->image)){
			if($request->hasFile('image') && $request->file('image')->isValid()){
						
					$imageName = Auth::user()->image;
					if(!empty($imageName)){
						Storage::disk('public')->delete("$imageName");
					}
					
					$input['image'] = Storage::disk('public')->putFileAs(
						'user_data/'.$user->id, $request->file('image'),'profile-image.'.$input['image']->extension()
					);
			}

		}else{
				$input['image']='';
			}

			$user->update(['image'=>$input['image']]);
		//unset($input['phone_numbers'],$input['email'],$input['addresses'],$input['favourite_address']);
		
			$input['phone_numbers']=$request->phone_numbers;
			$input['email']=$request->email;
			$input['addresses']=$request->addresses;
			$input['favourite_address']=$request->favourite_address;
			$input['user_id']=$user->id;
			$input['driver_id']=Auth::user()->id;
			$input['first_name']=$input['first_name'];
			$input['last_name']=$input['last_name'];
			$record=\App\UserData::create($input);
			
			return response()->json(['success'=>true,'message'=>'user data saved successfully','data'=>$record],$this->successCode);
		}catch (\Illuminate\Database\QueryException $exception){
			$errorCode = $exception->errorInfo[1];
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}catch(\Exception $exception){
			return response()->json(['message'=>$exception->getMessage()], $this->warningCode);
		}
	}
}
	
	
